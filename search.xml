<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BGP实验</title>
    <url>/2023/11/28/BGP%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="BGP基础实验"><a href="#BGP基础实验" class="headerlink" title="BGP基础实验"></a>BGP基础实验</h1><p>设备连接方式、IP地址规划、BGP AS号如图所示，所有设备均创建Loopback0接口，IP地址为10.0.x.x&#x2F;32，其中x为设备编号，所有设备都使用Loopback0接口IP地址作为BGP Router ID。R1、R5上存在Loopback1模拟用户网段。</p>
<p>R2、R3、R4之间运行OSPF，在R2、R3、R4的互联接口、Loopback0接口上激活OSPF。!</p>
<span id="more"></span>

<h2 id="实验背景"><a href="#实验背景" class="headerlink" title="实验背景"></a>实验背景</h2><p>你是公司的网络管理员。公司的网络采用了BGP协议作为路由协议。公司的网络由多个自治系统组成，不同的分支机构使用了不同的AS号，现在你需要完成公司网络的搭建工作。在公司总部使用了OSPF作为IGP，公司内部不同分支机构使用的是私有的BGP AS号。</p>
<p><img src="/2023/11/28/BGP%E5%AE%9E%E9%AA%8C/bgpadaw110633.png" alt="bgpadaw110633"></p>
<h1 id="1-配置ip"><a href="#1-配置ip" class="headerlink" title="1.配置ip"></a>1.配置ip</h1><p>如拓扑图配置各个接口ip，和loopback 0 ：10.0.x.x</p>
<p>r1 loopback 1 ：10.1.1.1 24</p>
<p>r5 loopback 1 ：10.1.5.5 24</p>
<p>r2 r3 r4配置ospf：略</p>
<h1 id="2-配置IBGP对等体"><a href="#2-配置IBGP对等体" class="headerlink" title="2.配置IBGP对等体"></a>2.配置IBGP对等体</h1><p>在R2、R3、R4之间基于Loopback0接口建立全互联的IBGP对等体关系。</p>
<p>#R2上配置BGP</p>
<p>[R2]bgp 64512</p>
<p>[R2-bgp] router-id 10.0.2.2</p>
<p>[R2-bgp] peer 10.0.3.3 as-number 64512</p>
<p>[R2-bgp] peer 10.0.3.3 connect-interface LoopBack0</p>
<p>[R2-bgp] peer 10.0.4.4 as-number 64512</p>
<p>[R2-bgp] peer 10.0.4.4 connect-interface LoopBack0</p>
<p>#R3上配置BGP</p>
<p>[R3]bgp 64512</p>
<p>[R3-bgp] router-id 10.0.3.3</p>
<p>[R3-bgp] peer 10.0.2.2 as-number 64512</p>
<p>[R3-bgp] peer 10.0.2.2 connect-interface LoopBack0</p>
<p>[R3-bgp] peer 10.0.4.4 as-number 64512</p>
<p>[R3-bgp] peer 10.0.4.4 connect-interface LoopBack0</p>
<p>#R4上配置BGP</p>
<p>[R4]bgp 64512</p>
<p>[R4-bgp] peer 10.0.2.2 as-number 64512</p>
<p>[R4-bgp] peer 10.0.2.2 connect-interface LoopBack0</p>
<p>[R4-bgp] peer 10.0.3.3 as-number 64512</p>
<p>[R4-bgp] peer 10.0.3.3 connect-interface LoopBack0</p>
<p>#分别在R2、R3、R4上检查BGP对等体状态</p>
<h1 id="3-配置EBGP对等体"><a href="#3-配置EBGP对等体" class="headerlink" title="3.配置EBGP对等体"></a>3.配置EBGP对等体</h1><p>（一般情况使用直连接口建立EBGp）</p>
<p>在R1与R2、R4与R5之间基于Loopback0接口建立EBGP对等体关系，为保证能够正常建立，在R1、R2上配置静态路由使Loopback0之间路由可达（R4、R5同样操作）。</p>
<p>#在R1、R2上配置静态路由</p>
<p>[R1]ip route-static 10.0.2.2 32 10.0.12.2</p>
<p>[R2]ip route-static 10.0.1.1 32 10.0.12.1</p>
<p>#在R4、R5上配置静态路由</p>
<p>[R4]ip route-static 10.0.5.5 32 10.0.45.5</p>
<p>[R5]ip route-static 10.0.4.4 32 10.0.45.4</p>
<p>这里配置静态路由，因为要建立TCP会话的前提，需要在数据层面两路由器相通，所以需要需要手工配置静态路由，实现loopback 0 之间互通</p>
<p>#配置R1、R2之间的EBGP对等体</p>
<p>[R1]bgp 64513</p>
<p>[R1-bgp] router-id 10.0.1.1</p>
<p>[R1-bgp] peer 10.0.2.2 as-number 64512</p>
<p>[R1-bgp] peer 10.0.2.2 ebgp-max-hop 2</p>
<p>[R1-bgp] peer 10.0.2.2 connect-interface LoopBack0</p>
<p>[R2]bgp 64512</p>
<p>[R2-bgp] peer 10.0.1.1 as-number 64513</p>
<p>[R2-bgp] peer 10.0.1.1 ebgp-max-hop 2</p>
<p>[R2-bgp] peer 10.0.1.1 connect-interface LoopBack0</p>
<p>默认情况下，EBGP连接允许的最大跳数为1，这导致EBGP对等体之间只能使用直连链路建立EBGP对等体关系，为使用环回口作为更新源需要手动修改EBGP连接允许的最大跳数。</p>
<p>#配置R4、R5之间的EBGP对等体</p>
<p>[R4]bgp 64512</p>
<p>[R4-bgp] peer 10.0.5.5 as-number 64514</p>
<p>[R4-bgp] peer 10.0.5.5 ebgp-max-hop 2</p>
<p>[R4-bgp] peer 10.0.5.5 connect-interface LoopBack0</p>
<p>[R5]bgp 64514</p>
<p>[R5-bgp] router-id 10.0.5.5</p>
<p>[R5-bgp] peer 10.0.4.4 as-number 64512</p>
<p>[R5-bgp] peer 10.0.4.4 ebgp-max-hop 2</p>
<p>[R5-bgp] peer 10.0.4.4 connect-interface LoopBack0</p>
<p>#在R1、R5上检查EBGP对等体状态</p>
<h1 id="4-在BGP中发布路由"><a href="#4-在BGP中发布路由" class="headerlink" title="4.在BGP中发布路由"></a>4.在BGP中发布路由</h1><p>在R1、R5上将Loopback1接口路由发布到BGP</p>
<p>#在R1、R5上通过network命令发布路由</p>
<p>[R1]bgp 64513</p>
<p>[R1-bgp] network 10.1.1.1 24</p>
<p>[R5]bgp 64514</p>
<p>[R5-bgp] network 10.1.5.5 24</p>
<p>在R3上查看BGP路由表</p>
<p><img src="/2023/11/28/BGP%E5%AE%9E%E9%AA%8C/luyoub122914.png" alt="luyoub122914"></p>
<p>可以看到此时R3上已经学习到R1、R5上发布的BGP路由，但是都是<strong>非有效路由</strong>，这是因为它们的下一跳在R3上都不可达，为此可以在R2、R4上通过<strong>next-hop-local</strong>命令修改下一跳地址为R2、R4的更新源地址。</p>
<p>原因：ebgp对等体在发送数据时，下一跳地址为自身更新源地址，ibgp收到ebgp发送的数据，下一跳不变</p>
<p>#在R2、R4上将路由的下一跳地址修改为自身</p>
<p>[R2]bgp 64512</p>
<p>[R2-bgp] peer 10.0.3.3 next-hop-local</p>
<p>[R2-bgp] peer 10.0.4.4 next-hop-local</p>
<p>[R4]bgp 64512</p>
<p>[R4-bgp] peer 10.0.2.2 next-hop-local</p>
<p>[R4-bgp] peer 10.0.3.3 next-hop-local</p>
<p><strong>peer next-hop-local</strong>命令一般在ASBR上配置。当设备通过EBGP邻居学到路由再转发给其他IBGP邻居时，默认不修改下一跳，但其EBGP邻居发来的路由的下一跳都是其EBGP邻居的Peer地址，本端对等体所属AS域内的IBGP邻居收到这样的路由后，由于下一跳不可达导致路由无法活跃。因此，需要在ASBR上对IBGP邻居配置<strong>peer next-hop-local</strong>命令，使得发给IBGP邻居的路由的下一跳是其自身的地址，IBGP邻居收到这样的路由后（由于域内都配置了IGP）发现下一跳可达，路由即为活跃路由。</p>
<p>此命令为覆盖式命令。</p>
<p>执行<strong>peer next-hop-local</strong>命令后，设备向IBGP对等体&#x2F;对等体组通告路由时，把下一跳属性设为自身的IP地址。</p>
<p><strong>peer next-hop-local</strong>命令仅应用于IBGP对等体间。</p>
<p>再次r3上查看bgp路由表</p>
<p><img src="/2023/11/28/BGP%E5%AE%9E%E9%AA%8C/louybadwad128123318.png" alt="louybadwad128123318"></p>
<p>此时两条BGP路由都变成了有效、最优的状态。</p>
<p>#在R1、R5上查看BGP路由表<img src="/2023/11/28/BGP%E5%AE%9E%E9%AA%8C/r11128123426.png" alt="r11128123426"></p>
<p>R1、R5之间相互学习到了对端Loopback1接口路由。</p>
<h1 id="BGP路由汇总实验"><a href="#BGP路由汇总实验" class="headerlink" title="BGP路由汇总实验"></a>BGP路由汇总实验</h1><p><img src="/2023/11/28/BGP%E5%AE%9E%E9%AA%8C/luyouhuizongdaw143536.png" alt="luyouhuizongdaw143536"></p>
<p>BGP AS号、互联地址如图所示，所有设备均创建Loopback0接口，IP地址为10.0.x.x&#x2F;32，其中x为设备编号。</p>
<p>R1、R2、R3使用Loopback0地址作为BGP Router ID，基于直连接口建立EBGP对等体关系。</p>
<p>R1、R3上存在Loopback1、Loopback2接口，用于模拟用户网段。</p>
<h1 id="1-配置ip-1"><a href="#1-配置ip-1" class="headerlink" title="1.配置ip"></a>1.配置ip</h1><p>略</p>
<h1 id="2-配置EBGPd对等体"><a href="#2-配置EBGPd对等体" class="headerlink" title="2.配置EBGPd对等体"></a>2.配置EBGPd对等体</h1><p>#配置R1</p>
<p>[R1]bgp 64511</p>
<p>[R1-bgp] router-id 10.0.1.1</p>
<p>[R1-bgp] peer 10.0.12.2 as-number 64512</p>
<p>#配置R2</p>
<p>#配置R3</p>
<p>[R3]bgp 64513</p>
<p>[R3-bgp] router-id 10.0.3.3</p>
<p>[R3-bgp] peer 10.0.23.2 as-number 64512</p>
<h1 id="3-BGP路由自动汇总"><a href="#3-BGP路由自动汇总" class="headerlink" title="3.BGP路由自动汇总"></a>3.BGP路由自动汇总</h1><p>在R1上开启BGP路由自动汇总，将Loopback1、Loopback2接口路由发布到BGP中，并进行自动汇总。</p>
<p>#创建IP前缀列表1，匹配Loopback1、Loopback2接口路由</p>
<p>[R1]ip ip-prefix 1 permit 172.16.0.0 16 greater-equal 24 less-equal 24</p>
<p>#创建Route-Policy hcip，并创建节点10，在其中调用IP前缀列表1</p>
<p>[R1]route-policy hcip permit node 10</p>
<p>[R1-route-policy] if-match ip-prefix 1</p>
<p>[R1-route-policy] quit</p>
<p>[R1]bgp 64511</p>
<p>[R1-bgp] import-route direct route-policy hcip</p>
<p>[R1-bgp] summary automatic</p>
<p>Info: Automatic summarization is valid only for the routes imported through the import-route command.</p>
<p>自动汇总只对通过<strong>import-route</strong>命令引入的路由生效。</p>
<p>#在R1上查看BGP路由表</p>
<p><R1>display	bgp	routing-table	</R1></p>
<p><img src="/2023/11/28/BGP%E5%AE%9E%E9%AA%8C/r11128123426.png" alt="r11128123426"></p>
<p>Loopback1、Loopback2接口路由已经发布到BGP，由于R1激活了BGP路由自动汇总，因此R1会将这些路由汇总成172.16.0.0&#x2F;16，同时抑制所有的明细路由，通过明细路由前的“s”标记可以看出，该标记的含义为“suppressed”，表示被抑制，最终R1只对外通告汇总路由172.16.0.0&#x2F;16。</p>
<p>#在R2上查看BGP路由表</p>
<p><R2>display bgp routing-table </R2></p>
<p>R2上只能看到一条主类路由172.16.0.0&#x2F;16。</p>
<p>#在R2上查看BGP路由172.16.0.0的明细信息</p>
<p><R2>display bgp routing-table 172.16.0.0</R2></p>
<p><img src="/2023/11/28/BGP%E5%AE%9E%E9%AA%8C/r2jyj28150027.png" alt="r2jyj28150027"></p>
<p>该路由的路径属性中存在Aggregator属性，其中携带了汇总路由生成设备所属的AS号以及其Router ID</p>
<h1 id="4-BGP路由手动汇总"><a href="#4-BGP路由手动汇总" class="headerlink" title="4.BGP路由手动汇总"></a>4.BGP路由手动汇总</h1><p>在R3上将Loopback1、Loopback2接口路由发布到BGP，在R2上通过<strong>aggregate</strong>命令执行手动汇总，并抑制明细路由的对外发布。</p>
<p>#创建IP前缀列表1，匹配Loopback1、Loopback2接口路由</p>
<p>[R3]ip ip-prefix 1 permit 172.17.0.0 16 greater-equal 24 less-equal 24</p>
<p>#创建Route-Policy hcip，并创建节点10，在其中调用IP前缀列表1</p>
<p>[R3]route-policy hcip permit node 10</p>
<p>[R3-route-policy] if-match ip-prefix 1</p>
<p>[R3-route-policy] quit</p>
<p>#将Loopback1、Loopback2接口路由发布到BGP </p>
<p>[R3]bgp 64513</p>
<p>[R3-bgp] import-route direct route-policy hcip</p>
<p>#查看R2的BGP路由表</p>
<p><R2>display	bgp	routing-table</R2></p>
<p>​	<img src="/2023/11/28/BGP%E5%AE%9E%E9%AA%8C/QQr2aef31128150511.png" alt="QQr2aef31128150511"></p>
<p>在R2的BGP路由表中已经存在R3通告的BGP路由172.17.1.0&#x2F;24、172.17.2.0&#x2F;24。</p>
<p>#R2上执行手动路由汇总，将172.17.1.0&#x2F;24、172.17.2.0&#x2F;24汇总成172.17.0.0&#x2F;22，并抑制明细路由的对外通告</p>
<p>[R2]bgp 64512</p>
<p>[R2-bgp] aggregate 172.17.0.0 22 detail-suppressed</p>
<p>#查看R2的BGP路由表</p>
<p><R2>display	bgp	routing-table</R2></p>
<p>​	</p>
<p>此时在R2的BGP路由表中可以看到汇总后的路由。</p>
<p> <img src="/2023/11/28/BGP%E5%AE%9E%E9%AA%8C/radwahh128150729.png" alt="radwahh128150729"></p>
<p>#在R2上查看BGP路由172.16.0.0&#x2F;22的明细信息</p>
<p><R2>display bgp routing-table 172.17.0.0 22</R2></p>
<p>从输出信息<img src="/2023/11/28/BGP%E5%AE%9E%E9%AA%8C/diushi222f1030.png" alt="diushi222f1030">可以看到AS_Path值为Nil，代表了AS_Path属性值为空，这意味着丢失了明细的AS_Path属性值，BGP依赖AS_Path实现防环，因此AS_Path属性的丢失可能带来路由环路。从该条路由对外通告的对等体中可以看到10.0.23.3（R3)。</p>
<p>#查看R3的BGP路由表</p>
<p>在R3的BGP路由表中可以看到汇总路由172.17.0.0&#x2F;22。</p>
<p>#为防止路由环路，在R2上执行手动汇总时增加as-set关键字</p>
<p>[R2]bgp 64512</p>
<p>[R2-bgp] aggregate 172.17.0.0 255.255.252.0 detail-suppressed as-set</p>
<p>#再次在R2上查看BGP路由172.17.0.0&#x2F;22的明细信息</p>
<p><img src="/2023/11/28/BGP%E5%AE%9E%E9%AA%8C/as645138151320.png" alt="as645138151320"></p>
<p>可以看到此时AS_Path属性值为64513，此时该条路由<strong>依旧向10.0.23.3（R3）</strong>通告。</p>
<p>R3收到关于172.17.0.0&#x2F;22的通告之后，在AS_Path中将看到自身的AS号（64153），将会忽略该路由通告。此时R3的BGP路由表中无法看到汇总路由172.17.0.0&#x2F;22，因此通过在手动路由汇总的配置中使用as-set关键字顺利地规避了路由环路的产生。</p>
<h1 id="BGP路由反射器"><a href="#BGP路由反射器" class="headerlink" title="BGP路由反射器"></a>BGP路由反射器</h1>]]></content>
      <categories>
        <category>ip实验</category>
      </categories>
      <tags>
        <tag>BGP</tag>
      </tags>
  </entry>
  <entry>
    <title>DHCP基础配置</title>
    <url>/2023/11/25/DHCP%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p> DHCP是一种终端自动配置协议，客户端通过DHCP协议可获取一个合法的动态IP地址。</p>
<span id="more"></span>

<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>随着网络规模的扩大和网络复杂度的提高，网络配置越来越复杂，经常出现计算机位置变化（如便携机或无线网络）和计算机数量超过可分配的IP地址的情况。动态主机配置协议DHCP（Dynamic Host Configuration Protocol）就是为满足这些需求而发展起来的。DHCP协议以服务器&#x2F;客户端（Server&#x2F;Client）模式工作，DHCP客户端向DHCP服务器动态地请求配置信息，DHCP服务器可以很方便地为客户端动态发送配置信息。</p>
<h3 id="DHCP服务器"><a href="#DHCP服务器" class="headerlink" title="DHCP服务器"></a>DHCP服务器</h3><p>DHCP Server即DHCP服务器，负责客户端IP地址的分配。客户端向服务器发送配置申请报文（包括IP地址、子网掩码、缺省网关等参数），服务器根据策略返回携带相应配置信息的报文，请求报文和回应报文都采用UDP进行封装。</p>
<h3 id="DHCP中继"><a href="#DHCP中继" class="headerlink" title="DHCP中继"></a>DHCP中继</h3><p>DHCP Relay即DHCP中继，它是为解决服务器和客户端不在同一个网段而提出来的，它提供了对DHCP广播报文的透明传输功能，能够把DHCP客户端的广播报文透明地传送到其它网段的DHCP服务器上，同样能够把DHCP服务器端的广播报文透明地传送到其它网段的DHCP客户端。</p>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p>基本命令<br><strong>pc：</strong></p>
<p>ipconfig &#x2F;release—释放ip地址<br>ipconfig &#x2F;renew—重新获取ip</p>
<p><strong>将DHCP转化为固定的地址：</strong></p>
<p>ip pool 名字—进入地址池<br>staic-bind ip-address 要分配的固定ip mac-address 目标的mac地址—添加固定地址到pc端<br>lease day &lt;0-999&gt;—修改租期（不建议修改）</p>
<p>将部分ip地址排除地址池，用于静态路由配置</p>
<p>ip pool 名字—进入地址池<br>excluded-ip-address 192.168.1.1 192.168.1.50—把1.1到1.50的地址排除出地址池不使用</p>
<p><strong>重置与查看地址池</strong></p>
<p>reset ip pool name 名字—重置ip配置<br>dis ip pool name 名字—查看指定地址池<br>dis ip pool—查看地址池<br>dis ip pool 名字 used—查看使用情况</p>
<p><strong>配置global全局模式</strong></p>
<p>先配置物理接口</p>
<p>interface 接口号—进入物理接口<br>ip address ip地址—配置物理接口IP</p>
<p>DHCP enable—开启DHCP功能<br>ip pool 名字—创建一个ip地址池（有几个网段就建几个池）<br>network 192.168.1.0 mask 24—给ip地址池添加一个网段<br>gateway-list 192.168.1.1—设置192.168.1.1这个ip地址为网关<br>dns-list 8.8.8.8 192.168.1.1—配置DNS为8.8.8.8（前面的优先）<br>interface ip地址—进入物理接口<br>dhcp select global—给接口配置全局模式</p>
<p>将pc更改为DHCP获取IP方式，就可以自动分配ip地址了</p>
<p><strong>interface配置方式</strong><br>基于接口的DHCP的配置方式：<br>配置物理接口的ip网关：</p>
<p>interface 接口号—进入接口<br>ip address IP网关—配置网关</p>
<p>dhcp enable—开启服务<br>dhcp select interface—选择interface这个配置方式<br>dhcp server dns-list 8.8.8.8-–配置DNS服务</p>
<p>注意：这种配置方式分配的ip地址网段，是该接口所在的网段的ip地址，网关就是这个接口的ip地址</p>
<p><strong>relay（中继）配置方式</strong></p>
<p>用于在服务器上做配置，路由器进行转发，减少负载量，可以对整个网络体系进行配置<br>首先要实现服务器与个网段互通<br>在服务器的配置：</p>
<p>服务器物理接口配置ip<br>ip route-static 0.0.0.0 0 下一跳的ip—服务器配置缺省路由保证互通<br>dhcp enable—在服务器开启dhcp功能<br>ip pool 名字—创建ip地址池（需要几个网段就创建几个地址池）<br>network 192.168.1.0 mask 24—创建网段<br>gateway-list 192.168.1.1—创建网关<br>dns-list 8.8.8.8—创建dns<br>interface 物理接口—进入物理接口<br>dhcp select global—选择全局配置模式</p>
<p><strong>在路由器&#x2F;核心交换机上的配置</strong></p>
<p>dhcp enable—开启dhcp功能<br>interface 接口号—进入接口 （需要几个网段就分别进入配置）<br>dhcp select relay—开启中继模式<br>dhcp relay server-ip 服务器物理ip—选择中继分配的接口</p>
<h1 id="基本实验"><a href="#基本实验" class="headerlink" title="基本实验"></a>基本实验</h1><p><img src="/2023/11/25/DHCP%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/newtu222.png" alt="newtu222"></p>
<ol>
<li>R1和R3模拟客户端，作为DHCP Client。</li>
<li>R2作为DHCP Server为R1和R3分配IP地址。</li>
</ol>
<p>动态主机配置协议DHCP（Dynamic Host Configuration Protocol）是一种用于集中对用户IP地址进行动态管理和配置的技术。即使规模较小的网络，通过DHCP也可以使后续增加网络设备变得简单快捷。</p>
<p>DHCP协议由RFC 2131定义，采用客户端&#x2F;服务器通信模式，由客户端（DHCP Client）向服务器（DHCP Server）提出配置申请，服务器返回为客户端分配的配置信息。</p>
<p>DHCP可以提供两种地址分配机制，网络管理员可以根据网络需求为不同的主机选择不同的分配策略。</p>
<p>• 动态分配机制：通过DHCP为主机分配一个有使用期限（这个使用期限通常叫做租期）的IP地址。这种分配机制适用于主机需要临时接入网络或者空闲地址数小于网络主机总数且主机不需要永久连接网络的场景。</p>
<p>• 静态分配机制：网络管理员通过DHCP为指定的主机分配固定的IP地址。相比手工静态配置IP地址，通过DHCP方式静态分配机制避免人工配置发生错误，方便管理员统一维护管理。</p>
<p>配置R2 ip：略</p>
<h2 id="开启DHCP功能"><a href="#开启DHCP功能" class="headerlink" title="开启DHCP功能"></a>开启DHCP功能</h2><p>[R1]dhcp enable </p>
<p>Info: The operation may take a few seconds. Please wait for a moment.done.</p>
<p><strong>dhcp enable</strong>命令是DHCP相关功能的总开关，DHCP Client和DHCP Server等功能都要在执行dhcp enable命令使能DHCP功能后才会生效。</p>
<p>[R2]dhcp enable </p>
<p>Info: The operation may take a few seconds. Please wait for a moment.done.</p>
<p>[R3]dhcp enable </p>
<p>Info: The operation may take a few seconds. Please wait for a moment.done.</p>
<h2 id="配置地址池"><a href="#配置地址池" class="headerlink" title="配置地址池"></a>配置地址池</h2><p># 配置R2的GigabitEthernet 0&#x2F;0&#x2F;0的接口地址池，为R1分配IP地址 </p>
<p>[R2]interface GigabitEthernet 0&#x2F;0&#x2F;0</p>
<p>[R2-GigabitEthernet0&#x2F;0&#x2F;0]dhcp select interface </p>
<p><strong>dhcp select interface</strong>命令用来开启接口采用接口地址池的DHCP Server功能。若不执行此命令，则无法配置接口地址池的相关参数。</p>
<p>[R2-GigabitEthernet0&#x2F;0&#x2F;0]dhcp server dns-list 10.0.12.2 </p>
<p><strong>dhcp server dns-list</strong>命令用来指定接口地址池下的DNS服务器地址。最多可以配置8个DNS Server的IP地址，用空格分隔。</p>
<p># 配置全局地址池 </p>
<p>[R2]ip pool GlobalPool</p>
<p>Info: It’s successful to create an IP address pool.</p>
<p><em>创建名<strong>为</strong>G**lobalPool的地址池</em></p>
<p>[R2-ip-pool-GlobalPool]network 10.0.23.0 mask 24 </p>
<p><strong>network</strong>命令用来配置全局地址池下可分配的网段地址。</p>
<p>[R2-ip-pool-GlobalPool]dns-list 10.0.23.2 </p>
<p>[R2-ip-pool-GlobalPool]gateway-list 10.0.23.2 </p>
<p><strong>gateway-list</strong>命令用来为DHCP Client配置出口网关地址。R3在获取地址之后，会生成一条默认路由，下一跳地址为10.0.23.2。</p>
<p>[R2-ip-pool-GlobalPool]lease day 2 hour 2 </p>
<p><strong>lease</strong>命令用来配置地址池下的地址租期。当租约被设置为<strong>unlimited</strong>时，代表租期无限制。缺省情况下，IP地址租期是1天。</p>
<p>[R2-ip-pool-GlobalPool]static-bind ip-address 10.0.23.3 mac-address 00e0-fc6f-6d1f</p>
<p><strong>static-bind</strong>命令用来将DHCP Server全局地址池下的IP地址与MAC地址进行绑定。00e0-fc6f-6d1f为当前实验环境下R3的GigabitEthernet0&#x2F;0&#x2F;0接口的MAC地址，可以在R3上通过命令“display interface GigabitEthernet0&#x2F;0&#x2F;0”来查看接口的MAC地址。配置完这条命令之后，R3会获得固定的IP–10.0.23.3。</p>
<p>[R2-ip-pool-GlobalPool]quit</p>
<p>#开启R2 GigabitEthernet 0&#x2F;0&#x2F;1接口的DHCP Server功能，为R3分配IP地址  </p>
<p>[R2]interface GigabitEthernet 0&#x2F;0&#x2F;1</p>
<p>[R2-GigabitEthernet0&#x2F;0&#x2F;1]dhcp select global</p>
<p><strong>dhcp select global</strong>命令用来开启接口采用全局地址池的DHCP Server功能。当接口收到DHCP Client请求之后，会到所有全局地址池中查找对应的地址池，然后分配可用的地址给DHCP Client。</p>
<h2 id="配置DHCP-Client"><a href="#配置DHCP-Client" class="headerlink" title="配置DHCP Client"></a>配置DHCP Client</h2><p>[R1]interface GigabitEthernet 0&#x2F;0&#x2F;0</p>
<p>[R1-GigabitEthernet0&#x2F;0&#x2F;0] ip address dhcp-alloc</p>
<p>[R3]interface GigabitEthernet 0&#x2F;0&#x2F;0</p>
<p>[R3-GigabitEthernet0&#x2F;0&#x2F;0] ip address dhcp-alloc</p>
<h2 id="结果验证"><a href="#结果验证" class="headerlink" title="结果验证"></a>结果验证</h2><h5 id="查看R1和R3的地址及路由等信息"><a href="#查看R1和R3的地址及路由等信息" class="headerlink" title="查看R1和R3的地址及路由等信息"></a>查看R1和R3的地址及路由等信息</h5><p>[R1]display ip interface brief </p>
<p>Interface             	IP Address&#x2F;Mask    Physical  	Protocol  </p>
<p>GigabitEthernet0&#x2F;0&#x2F;0       	<strong>10.0.12.254&#x2F;24</strong>    	up     up     </p>
<p> <em>仅保留<strong>关键信息，可</strong>以<strong>看到</strong>R1已经<strong>获取到了</strong>IP地址**。</em></p>
<p>[R1]display dns server </p>
<p>Type:</p>
<p>D:Dynamic   S:Static</p>
<p>No.  Type   IP Address</p>
<p>1   D   	10.0.12.2 </p>
<p><em>仅保留<strong>关键信息，可</strong>以<strong>看到</strong>R1已经<strong>获取到了DNS</strong>地址**。</em></p>
<p>[R1]display ip routing-table </p>
<p>Destination&#x2F;Mask   Proto  	Pre  Cost  	Flags 	NextHop     Interface</p>
<p>   0.0.0.0&#x2F;0  		<strong>Unr</strong>   60  0    D  		10.0.12.2    GigabitEthernet0&#x2F;0&#x2F;0</p>
<p><em>仅保留<strong>关键信息，可</strong>以<strong>看到</strong>R1已经<strong>获取到了</strong>默认路由**。</em></p>
<p>[R3]display ip interface brief </p>
<p>Interface            	IP Address&#x2F;Mask    Physical 	Protocol  </p>
<p>GigabitEthernet0&#x2F;0&#x2F;0       	<strong>10.0.23.3&#x2F;24</strong>     	up    up     </p>
<p><em>仅保留<strong>关键信息，可</strong>以<strong>看到</strong>R3已经<strong>获取到了</strong>固定<strong>的</strong>IP地址**。</em></p>
<p>[R3]display dns server </p>
<p>Type:</p>
<p>D:Dynamic   S:Static</p>
<p>No.  Type   IP Address</p>
<p>1   D    2.23.0.10</p>
<p><em>仅保留<strong>关键信息，可</strong>以<strong>看到</strong>R<strong>3</strong>已经<strong>获取到了DNS</strong>地址**。</em></p>
<p>[R3]display ip routing-table </p>
<p>Route Flags: R - relay, D - download to fib</p>
<p>-—————————————————————————–</p>
<p>Routing Tables: Public</p>
<p>​     Destinations : 8     Routes : 8     </p>
<p>Destination&#x2F;Mask   Proto  	Pre  Cost  Flags 	NextHop   	Interface</p>
<p>   0.0.0.0&#x2F;0    Unr   	60  0   D  		10.0.23.2  	GigabitEthernet0&#x2F;0&#x2F;0</p>
<p><em>仅保留<strong>关键信息，可</strong>以<strong>看到</strong>R3已经<strong>获取到了</strong>默认路由**。</em></p>
<h5 id="2、查看R2上的地址分配情况"><a href="#2、查看R2上的地址分配情况" class="headerlink" title="2、查看R2上的地址分配情况"></a>2、查看R2上的地址分配情况</h5><p>[R2]display ip pool name GlobalPool </p>
<p> Pool-name    : GlobalPool</p>
<p> Pool-No     : 1</p>
<p> Lease      : <strong>2 Days 2 Hours 0 Minutes</strong></p>
<p> Domain-name   : -</p>
<p> DNS-server0   	: 10.0.23.2    </p>
<p> NBNS-server0  	: -        </p>
<p> Netbios-type  		: -        </p>
<p> Position    		: Local      Status      : Unlocked</p>
<p> Gateway-0    : <strong>10.0.23.2</strong>    </p>
<p> Mask      	: <strong>255.255.255.0</strong></p>
<p> VPN instance  		: –</p>
<p> -—————————————————————————-</p>
<p>​     Start      End   Total  Used  Idle(Expired)  Conflict  Disable</p>
<p> -—————————————————————————-</p>
<p>​    10.0.23.1   10.0.23.254  253   <strong>1</strong>     252(0)     0     0</p>
<p> -—————————————————————————-</p>
<p><strong>display ip pool</strong>命令用来查看已配置的IP地址池信息。包括地址池的名称、租期、锁定状态、地址池中IP地址的状态等。</p>
<p>[R2]display ip pool interface GigabitEthernet0&#x2F;0&#x2F;1 </p>
<p> Pool-name    : <strong>GigabitEthernet****0&#x2F;0&#x2F;1</strong></p>
<p> Pool-No     : 0</p>
<p> Lease      : <strong>1 Days 0 Hours 0 Minutes</strong></p>
<p> Domain-name   : -</p>
<p> DNS-server0   	: <strong>10.0.12.2</strong>    </p>
<p> NBNS-server0  	: -        </p>
<p> Netbios-type  		: -        </p>
<p> Position    	: Interface    Status      : Unlocked</p>
<p> Gateway-0    : <strong>10.0.12.2</strong>    </p>
<p> Mask      	: 255.255.255.0</p>
<p> VPN instance  		: –</p>
<p> -—————————————————————————-</p>
<p>​     Start  		End   		Total  Used  	Idle(Expired)  Conflict  Disable</p>
<p> -—————————————————————————-</p>
<p>​    10.0.12.1   	10.0.12.254  	253   <strong>1</strong>     252(0)     0     0</p>
<p> -—————————————————————————-</p>
<p>当配置接口地址池时，地址池的名称为接口的名称。分配的网关地址为该接口的IP地址，且无法修改。</p>
<h1 id="中继实验"><a href="#中继实验" class="headerlink" title="中继实验"></a>中继实验</h1><p><img src="/2023/11/25/DHCP%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/dhcpzz111.png" alt="dhcpzz111">交换机4上有多个vlan，交换机1模拟dhcp服务器实现为多个vlan分配地址，交换机3作为dhcp终极连接服务器和客户端</p>
<h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="创建VLAN"><a href="#创建VLAN" class="headerlink" title="创建VLAN"></a>创建VLAN</h3><p>[S1]vlan 40</p>
<p>[S3]vlan batch 10 20 30 40</p>
<p>[S4]vlan batch 10 20 30</p>
<h3 id="配置接口放通相应的VLAN"><a href="#配置接口放通相应的VLAN" class="headerlink" title="配置接口放通相应的VLAN"></a>配置接口放通相应的VLAN</h3><p>[S4]interface GigabitEthernet0&#x2F;0&#x2F;3</p>
<p>[S4-GigabitEthernet0&#x2F;0&#x2F;3] port link-type trunk</p>
<p>[S4-GigabitEthernet0&#x2F;0&#x2F;3] port trunk allow-pass vlan 10 20 30</p>
<p>[S4-GigabitEthernet0&#x2F;0&#x2F;3] quit</p>
<p>[S3]interface GigabitEthernet0&#x2F;0&#x2F;1</p>
<p>[S3-GigabitEthernet0&#x2F;0&#x2F;1] port link-type access</p>
<p>[S3-GigabitEthernet0&#x2F;0&#x2F;1] port default vlan 40</p>
<p>[S3-GigabitEthernet0&#x2F;0&#x2F;1] quit</p>
<p>[S3]interface GigabitEthernet0&#x2F;0&#x2F;3</p>
<p>[S3-GigabitEthernet0&#x2F;0&#x2F;3] port link-type trunk</p>
<p>[S3-GigabitEthernet0&#x2F;0&#x2F;3] port trunk allow-pass vlan 10 20 30</p>
<p>[S3-GigabitEthernet0&#x2F;0&#x2F;3] quit</p>
<p>[S1]interface GigabitEthernet0&#x2F;0&#x2F;12</p>
<p>[S1-GigabitEthernet0&#x2F;0&#x2F;12] port link-type access</p>
<p>[S1-GigabitEthernet0&#x2F;0&#x2F;12] port default vlan 40</p>
<p>[S1-GigabitEthernet0&#x2F;0&#x2F;12] quit</p>
<p>交换机4和交换机3之间因为放通多个vlan，所以使用trunk口，交换机3和交换机1之间只有一个vlan40，所以配置access口，pvid&#x3D;40</p>
<h3 id="VLANIF配置"><a href="#VLANIF配置" class="headerlink" title="VLANIF配置"></a>VLANIF配置</h3><p>[S4]interface Vlanif 10</p>
<p>[S4-Vlanif10] quit</p>
<p>[S4]interface Vlanif 20</p>
<p>[S4-Vlanif20] quit</p>
<p>[S4]interface Vlanif 30</p>
<p>[S4-Vlanif30] quit</p>
<p>[S3]interface Vlanif 10</p>
<p>[S3-Vlanif10] ip address 10.0.10.3 24</p>
<p>[S3-Vlanif10] quit</p>
<p>[S3]interface Vlanif 20</p>
<p>[S3-Vlanif20] ip address 10.0.20.3 24</p>
<p>[S3-Vlanif20] quit</p>
<p>[S3]interface Vlanif 30</p>
<p>[S3-Vlanif30] ip address 10.0.30.3 24</p>
<p>[S3-Vlanif30] quit</p>
<p>[S3]interface Vlanif 40</p>
<p>[S3-Vlanif40] ip address 10.0.40.3 24</p>
<p>[S3-Vlanif40] quit</p>
<p>[S1]interface Vlanif 40</p>
<p>[S1-Vlanif40] ip address 10.0.40.1 24</p>
<p>[S1-Vlanif40] quit</p>
<p>检查一下交换机3和1之间的连通性</p>
<p>（开启DHCP服务，配置全局地址池，同时为S4上的VLANIF30分配静态IP地址。）：</p>
<h3 id="开启DHCP服务"><a href="#开启DHCP服务" class="headerlink" title="开启DHCP服务"></a>开启DHCP服务</h3><p>[S1]dhcp enable</p>
<h3 id="创建地址池VLAN10，用于给S4的VLANIF10分配地址"><a href="#创建地址池VLAN10，用于给S4的VLANIF10分配地址" class="headerlink" title="创建地址池VLAN10，用于给S4的VLANIF10分配地址"></a>创建地址池VLAN10，用于给S4的VLANIF10分配地址</h3><p>[S1]ip pool vlan10 &#x2F;&#x2F;创建地址池名为vlan10</p>
<p>[S1-ip-pool-vlan10] gateway-list 10.0.10.3  &#x2F;&#x2F;网关是中继上的vlanif 10</p>
<p>[S1-ip-pool-vlan10] network 10.0.10.0 mask 255.255.255.0 &#x2F;&#x2F;设置分配ip范围是10.0.10.1-10.0.10.255</p>
<p>[S1-ip-pool-vlan10] dns-list 10.0.10.3</p>
<p>[S1-ip-pool-vlan10] quit</p>
<h3 id="创建地址池VLAN20，用于给S4的VLANIF20分配地址"><a href="#创建地址池VLAN20，用于给S4的VLANIF20分配地址" class="headerlink" title="创建地址池VLAN20，用于给S4的VLANIF20分配地址"></a>创建地址池VLAN20，用于给S4的VLANIF20分配地址</h3><p>[S1]ip pool vlan20</p>
<p>[S1-ip-pool-vlan20] gateway-list 10.0.20.3</p>
<p>[S1-ip-pool-vlan20] network 10.0.20.0 mask 255.255.255.0</p>
<p>[S1-ip-pool-vlan20] dns-list 10.0.20.3</p>
<p>[S1-ip-pool-vlan20] quit</p>
<h3 id="创建地址池VLAN30，用于给S4的VLANIF30分配地址"><a href="#创建地址池VLAN30，用于给S4的VLANIF30分配地址" class="headerlink" title="创建地址池VLAN30，用于给S4的VLANIF30分配地址"></a>创建地址池VLAN30，用于给S4的VLANIF30分配地址</h3><p>[S1]ip pool vlan30</p>
<p>[S1-ip-pool-vlan30] gateway-list 10.0.30.3</p>
<p>[S1-ip-pool-vlan30] network 10.0.30.0 mask 255.255.255.0</p>
<p>[S1-ip-pool-vlan30] dns-list 10.0.30.3</p>
<p>[S1-ip-pool-vlan30] quit</p>
<h3 id="查看s4的vlanif30的mac"><a href="#查看s4的vlanif30的mac" class="headerlink" title="查看s4的vlanif30的mac"></a>查看s4的vlanif30的mac</h3><p>为了实现给s4的vlanif30口静态绑定一个指定的ip地址，我们需要先查看一下mac<img src="/2023/11/25/DHCP%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/macsiis30.png" alt="macsiis30"></p>
<h3 id="在S1上为S4的VLANIF30配置静态地址分配"><a href="#在S1上为S4的VLANIF30配置静态地址分配" class="headerlink" title="在S1上为S4的VLANIF30配置静态地址分配"></a>在S1上为S4的VLANIF30配置静态地址分配</h3><p><img src="/2023/11/25/DHCP%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/mac0234.png" alt="mac0234"></p>
<p>给s4的vlanif口静态分配ip：10.0.30.2</p>
<h3 id="在VLANIF40接口下使能DHCP-Server"><a href="#在VLANIF40接口下使能DHCP-Server" class="headerlink" title="在VLANIF40接口下使能DHCP Server"></a>在VLANIF40接口下使能DHCP Server</h3><p>[S1]interface Vlanif 40 </p>
<p>[S1-Vlanif40] dhcp select global &#x2F;&#x2F;全局的使能</p>
<h3 id="查看IP地址池配置情况"><a href="#查看IP地址池配置情况" class="headerlink" title="查看IP地址池配置情况"></a>查看IP地址池配置情况</h3><p>[S1]display ip pool name vlan30</p>
<p><img src="/2023/11/25/DHCP%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/3chakan0.png" alt="3chakan0"></p>
<p>地址池vlan30已经存在一个“Used”地址，该地址为静态分配的地址。</p>
<h3 id="配置前往用户网段的路由"><a href="#配置前往用户网段的路由" class="headerlink" title="配置前往用户网段的路由"></a>配置前往用户网段的路由</h3><p>[S1]ip route-static 10.0.10.0 24 10.0.40.3 </p>
<p>[S1]ip route-static 10.0.20.0 24 10.0.40.3</p>
<p>[S1]ip route-static 10.0.30.0 24 10.0.40.3</p>
<p>（或者配置缺省路由）</p>
<p>保证连通性</p>
<p>在S3上完成DHCP Relay相关配置</p>
<h3 id="开启DHCP服务-1"><a href="#开启DHCP服务-1" class="headerlink" title="开启DHCP服务"></a>开启DHCP服务</h3><p>[S3]dhcp enable</p>
<h3 id="在接口上配置DHCP-Relay，指定DHCP-Server"><a href="#在接口上配置DHCP-Relay，指定DHCP-Server" class="headerlink" title="在接口上配置DHCP Relay，指定DHCP Server"></a>在接口上配置DHCP Relay，指定DHCP Server</h3><p>[S3]interface Vlanif10</p>
<p>[S3-Vlanif10] dhcp select relay</p>
<p>[S3-Vlanif10] dhcp relay server-ip 10.0.40.1</p>
<p>[S3-Vlanif10] quit</p>
<p>[S3]interface Vlanif20</p>
<p>[S3-Vlanif20] dhcp select relay</p>
<p>[S3-Vlanif20] dhcp relay server-ip 10.0.40.1</p>
<p>[S3-Vlanif20] quit</p>
<p>[S3]interface Vlanif30</p>
<p>[S3-Vlanif30] dhcp select relay</p>
<p>[S3-Vlanif30] dhcp relay server-ip 10.0.40.1</p>
<p>[S3-Vlanif30] quit</p>
<h3 id="查看relay配置"><a href="#查看relay配置" class="headerlink" title="查看relay配置"></a>查看relay配置</h3><p><img src="/2023/11/25/DHCP%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/relayallss7.png" alt="relayallss7"></p>
<h3 id="DHCP-Client配置"><a href="#DHCP-Client配置" class="headerlink" title="DHCP Client配置"></a>DHCP Client配置</h3><p>在S4上配置VLANIF10、20、30接口通过DHCP获取IP地址</p>
<h4 id="开启DHCP服务-2"><a href="#开启DHCP服务-2" class="headerlink" title="开启DHCP服务"></a>开启DHCP服务</h4><p>[S4]dhcp enable</p>
<h4 id="开启接口通过DHCP获取地址"><a href="#开启接口通过DHCP获取地址" class="headerlink" title="开启接口通过DHCP获取地址"></a>开启接口通过DHCP获取地址</h4><p>[S4]interface Vlanif10</p>
<p>[S4-Vlanif10] ip address dhcp-alloc</p>
<p>[S4-Vlanif10] quit</p>
<p>[S4]interface Vlanif20</p>
<p>[S4-Vlanif20] ip address dhcp-alloc</p>
<p>[S4-Vlanif20] quit</p>
<p>[S4]interface Vlanif30</p>
<p>[S4-Vlanif30] ip address dhcp-alloc</p>
<p>[S4-Vlanif30] quit</p>
<h4 id="查看各个接口IP地址获取情况"><a href="#查看各个接口IP地址获取情况" class="headerlink" title="查看各个接口IP地址获取情况"></a>查看各个接口IP地址获取情况</h4><p><S4>display interface Vlanif 10</S4></p>
<p>Vlanif10 current state : UP</p>
<p>Line protocol current state : UP</p>
<p>Last line protocol up time : 2020-06-05 17:37:57 UTC-08:00</p>
<p>Description:</p>
<p>Route Port,The Maximum Transmit Unit is 1500</p>
<p>Internet Address is allocated by DHCP, 10.0.10.254&#x2F;24</p>
<p>[S4]display interface Vlanif 20</p>
<p>Vlanif20 current state : UP</p>
<p>Line protocol current state : UP</p>
<p>Last line protocol up time : 2020-06-05 17:41:23 UTC-08:00</p>
<p>Description:</p>
<p>Route Port,The Maximum Transmit Unit is 1500</p>
<p>Internet Address is allocated by DHCP, 10.0.20.254&#x2F;24</p>
<p>[S4]display interface Vlanif 30</p>
<p>Vlanif30 current state : UP</p>
<p>Line protocol current state : UP</p>
<p>Last line protocol up time : 2020-06-05 17:43:22 UTC-08:00</p>
<p>Description:</p>
<p>Route Port,The Maximum Transmit Unit is 1500</p>
<p>Internet Address is allocated by DHCP, 10.0.30.2&#x2F;24</p>
<p>接口已经通过DHCP获取到IP地址，并且VLANIF30的地址为静态分配的地址：10.0.30.2。</p>
]]></content>
      <categories>
        <category>ip实验</category>
      </categories>
      <tags>
        <tag>DHCP Relay</tag>
        <tag>DHCP</tag>
      </tags>
  </entry>
  <entry>
    <title>BGP路由反射器</title>
    <url>/2023/11/28/BGP%E8%B7%AF%E7%94%B1%E5%8F%8D%E5%B0%84%E5%99%A8/</url>
    <content><![CDATA[<h1 id="BGP路由反射器"><a href="#BGP路由反射器" class="headerlink" title="BGP路由反射器"></a>BGP路由反射器</h1><p>由于水平分割的原因，为了保证AS内所有的BGP路由器都能学习到完整的BGP路由，就必须在AS内实现IBGP全互联。</p>
<p>然而实现IBGP全互联存在诸多短板：</p>
<p> 路由器需维护大量的TCP及BGP连接，尤其在路由器数量较多时。</p>
<p> AS内BGP网络的可扩展性较差，因为通过纯手工配置命令。</p>
<p>为了解决该问题，可应用到RR路由反射器技术。</p>
<p>1、Client：RR客户端，在RR设备上通过手动指定。</p>
<blockquote>
<p>指定命令：peer 邻居 reflect-client</p>
</blockquote>
<p>2、除了指定的设备为客户端，其它设备均为非客户端。</p>
<p>实验：</p>
<p>R1、R2、R3、R4都属于AS64511，其连接方式、互联接口地址如图所示。每台设备均创建Loopback0接口，IP地址为10.0.x.x&#x2F;32，其中x为设备编号。R1、R2上的Loopback1地址分别为10.1.1.1&#x2F;24、10.2.2.2&#x2F;24，用于模拟用户网段。</p>
<span id="more"></span>

<p>所有设备都使用Loopback0地址作为BGP Router ID，R1与R2、R2与R3、R3与R4、R4与R2之间基于直连接口建立IBGP对等体关系，其中R1为R2的路由反射器客户端，R2为R3的路由反射器客户端，R3为R4的路由反射器客户端。</p>
<p><img src="/2023/11/28/BGP%E8%B7%AF%E7%94%B1%E5%8F%8D%E5%B0%84%E5%99%A8/bgpluy8165208.png" alt="bgpluy8165208"></p>
<p>配置ip地址：略</p>
<p>建立ibgp对等体：略</p>
<h1 id="配置路由反射器"><a href="#配置路由反射器" class="headerlink" title="配置路由反射器"></a>配置路由反射器</h1><p>#R2上将R1配置为路由反射器客户端</p>
<p>[R2]bgp 64511</p>
<p>[R2-bgp] peer 10.0.1.1 reflect-client</p>
<p>#R3上将R2配置为路由反射器客户端</p>
<p>[R3]bgp 64511</p>
<p>[R3-bgp] peer 10.0.2.2 reflect-client</p>
<p>#R4上将R3配置为路由反射器客户端</p>
<p>[R4]bgp 64511</p>
<p>[R4-bgp] peer 10.0.3.3 reflect-client</p>
<h1 id="验证Orginator-ID实现路由防环"><a href="#验证Orginator-ID实现路由防环" class="headerlink" title="验证Orginator_ID实现路由防环"></a>验证Orginator_ID实现路由防环</h1><p>在本步骤中，我们将在R2上发布BGP路由10.2.2.0&#x2F;24，并观察该路由依次经路由反射器R3、R4反射后，被通告回R2从而引发潜在路由环路风险的情况。</p>
<p>缺省情况下，R2发布BGP路由后，该路由将被R2直接通告给R4，另一方面也会通过R3反射给R4，此时R4将优选R2直接通告过来的路由，从而不会再将R3反射过来的路由再反射回给R2。为此，我们需要在R2上部署路由策略，使R2不直接向R4通告10.2.2.0&#x2F;24路由。</p>
<p>#配置路由策略</p>
<p>[R2]acl number 2000</p>
<p>[R2-acl-basic-2000] rule 5 permit</p>
<p>[R2-acl-basic-2000] quit</p>
<p>[R2]route-policy bgp deny node 10</p>
<p>[R2-route-policy] if-match acl 2000</p>
<p>#在BGP中调用路由策略</p>
<p>[R2]bgp 64511</p>
<p>[R2-bgp] peer 10.0.24.4 route-policy bgp export</p>
<p>#在R2上发布路由</p>
<p>[R2]bgp 64511</p>
<p>[R2-bgp] network 10.2.2.0 24</p>
<p>#R2上查看BGP路由10.2.2.0&#x2F;24的明细信息</p>
<p><img src="/2023/11/28/BGP%E8%B7%AF%E7%94%B1%E5%8F%8D%E5%B0%84%E5%99%A8/chakan102224728.png" alt="chakan102224728"></p>
<p>R2将该条路由通告给了R3、R1，但是并未通告给R4。</p>
<p>#R3上查看BGP路由10.2.2.0&#x2F;24的明细信息</p>
<p><img src="/2023/11/28/BGP%E8%B7%AF%E7%94%B1%E5%8F%8D%E5%B0%84%E5%99%A8/r174808.png" alt="r174808"></p>
<p>R3将来自反射器客户端的BGP路由10.2.2.0&#x2F;24反射给了10.0.34.4（R4）。同时该BGP路由的nexthop为10.0.23.2。</p>
<p># R4上查看BGP路由10.2.2.0&#x2F;24的明细信息</p>
<p><img src="/2023/11/28/BGP%E8%B7%AF%E7%94%B1%E5%8F%8D%E5%B0%84%E5%99%A8/r4chakan80119.png" alt="r4chakan80119"></p>
<p>该条路由来自反射器客户端R3，原始路由经由R3反射，路由的nexthop地址并未改变，同时R3为其添加了Orginator_ID属性，值为10.0.2.2。同时R4将该条路由反射给了R2。</p>
<p>#再次在R2上查看BGP路由10.2.2.0&#x2F;24的明细信息</p>
<p><img src="/2023/11/28/BGP%E8%B7%AF%E7%94%B1%E5%8F%8D%E5%B0%84%E5%99%A8/zacifa80349.png" alt="zacifa80349"></p>
<p>依旧只存在本地通告的BGP路由，没有R4通告的BGP路由。</p>
<p>#在R2上查看BGP对等体10.0.4.4的详细信息</p>
<p>display bgp peer 10.0.4.4 verbose</p>
<p><img src="/2023/11/28/BGP%E8%B7%AF%E7%94%B1%E5%8F%8D%E5%B0%84%E5%99%A8/safhaofbsh1128180629.png" alt="safhaofbsh1128180629"></p>
<p>从输出信息可以看到R2从R4收到了1个Update报文，未向R4发送Update报文（路由策略限制），但是本地BGP路由表中不存在由R4通告的BGP路由10.2.2.0&#x2F;24。</p>
<p>R4通告的BGP路由Orginator_ID属性值与本地的Router ID一致，R2忽略了该路由通告。</p>
<h1 id="验证Cluster-List实现路由防环"><a href="#验证Cluster-List实现路由防环" class="headerlink" title="验证Cluster_List实现路由防环"></a>验证Cluster_List实现路由防环</h1><p>为了方便观察现象，取消R2上的BGP路由发布，在R1上将Loopback1接口路由发布到BGP，观察Cluster_List如何防止环路。</p>
<p>#取消R2上的BGP路由发布</p>
<p>[R2]bgp 64511</p>
<p>[R2-bgp] undo network 10.2.2.0 255.255.255.0</p>
<p>#在R1上将Loopback1接口路由发布到BGP</p>
<p>[R1]bgp 64511</p>
<p>[R1-bgp] network 10.1.1.0 24</p>
<p>#依次在R1、R2、R3、R4上查看BGP路由10.1.1.0 &#x2F;24的明细信息</p>
<p><img src="/2023/11/28/BGP%E8%B7%AF%E7%94%B1%E5%8F%8D%E5%B0%84%E5%99%A8/xinfuaiell181000.png" alt="xinfuaiell181000"></p>
<p>R1为BGP路由10.1.1.0&#x2F;24的始发者，R1将路由通告给了R2</p>
<p><img src="/2023/11/28/BGP%E8%B7%AF%E7%94%B1%E5%8F%8D%E5%B0%84%E5%99%A8/2xinfahol128181116.png" alt="2xinfahol128181116"></p>
<p>来自路由反射器客户端R1的BGP路由10.1.1.0&#x2F;24，R2将其反射给了R3</p>
<p><img src="/2023/11/28/BGP%E8%B7%AF%E7%94%B1%E5%8F%8D%E5%B0%84%E5%99%A8/3xinmbxmcx1128181206.png" alt="3xinmbxmcx1128181206"></p>
<p>来自路由反射器客户端R2的BGP路由10.1.1.0&#x2F;24，R2反射时添加了Cluster_List属性，值为10.0.2.2，R3将该条路由反射给了R4</p>
<p><img src="/2023/11/28/BGP%E8%B7%AF%E7%94%B1%E5%8F%8D%E5%B0%84%E5%99%A8/44xinm1334.png" alt="44xinm1334"></p>
<p>来自路由反射器客户端R3的BGP路由10.1.1.0&#x2F;24，R3反射时添加了Cluster_List属性的值，当前值为10.0.3.3，10.0.2.2，R4将该条路由反射给了R2</p>
<p>#再次查看R2的BGP路由表</p>
<p><img src="/2023/11/28/BGP%E8%B7%AF%E7%94%B1%E5%8F%8D%E5%B0%84%E5%99%A8/zaizaici661435.png" alt="zaizaici661435"></p>
<p>R2的BGP路由表中依旧只有一条来自r1的BGP路由10.1.1.0&#x2F;24。</p>
<p>4通告的BGP路由其Cluster_List属性值中包含了R2的Cluster-ID，R2忽略了该路由通告。</p>
]]></content>
      <categories>
        <category>ip实验</category>
      </categories>
      <tags>
        <tag>BGP路由反射器</tag>
      </tags>
  </entry>
  <entry>
    <title>BGP路由优选</title>
    <url>/2023/11/28/BGP%E8%B7%AF%E7%94%B1%E4%BC%98%E9%80%89/</url>
    <content><![CDATA[<h1 id="BGP路由优选"><a href="#BGP路由优选" class="headerlink" title="BGP路由优选"></a>BGP路由优选</h1><h2 id="实验背景"><a href="#实验背景" class="headerlink" title="实验背景"></a>实验背景</h2><p>你是公司的网络管理员。公司的网络采用了BGP协议接入了两个服务运营商。公司自己采用了私有的AS号64512，ISP1的AS号为100，ISP2的AS号为200。通过AS100、AS200都可以到达相同的网络，你通过改变BGP的各种属性达到了调整路由走向的目的。</p>
<span id="more"></span>

<p>实验介绍：</p>
<p>设备互联方式、互联接口地址如图所示，所有设备均创建Loopback0接口，IP地址为10.0.x.x&#x2F;32，其中x为设备编号，所有设备都使用Loopback0地址作为BGP Router ID。</p>
<p>R1在AS100，R5在AS200，R2、R3、R4在AS64512。AS64512内运行OSPF，在互联接口（不包括连接外部AS的接口）、Loopback0接口上激活OSPF。</p>
<p>EBGP对等体关系基于直连接口建立，IBGP对等体关系基于Loopback0接口建立。</p>
<p>R1、R5上存在相同的网段172.16.1.0&#x2F;24、172.16.2.0&#x2F;24、172.16.3.0&#x2F;24、172.16.4.0&#x2F;24，在R1、R5上将其发布到BGP，以用于BGP路由优选。</p>
<p><img src="/2023/11/28/BGP%E8%B7%AF%E7%94%B1%E4%BC%98%E9%80%89/tuopu22sd182306.png" alt="tuopu22sd182306"></p>
<p>配置ip，配置bgp：略</p>
<p>#在R1、R5上将Loopback1、Loopback2、Loopback3、Loopback4接口路由发布到BGP中</p>
<p>[R1]bgp 100</p>
<p>[R1-bgp] network 172.16.1.0 24</p>
<p>[R1-bgp] network 172.16.2.0 24</p>
<p>[R1-bgp] network 172.16.3.0 24</p>
<p>[R1-bgp] network 172.16.4.0 24</p>
<p>[R5]bgp 200</p>
<p>[R5-bgp] network 172.16.1.0 24</p>
<p>[R5-bgp] network 172.16.2.0 24</p>
<p>[R5-bgp] network 172.16.3.0 24</p>
<p>[R5-bgp] network 172.16.4.0 24</p>
<p>#在R3上查看BGP路由表，检查BGP路由是否成功学习</p>
<p><img src="/2023/11/28/BGP%E8%B7%AF%E7%94%B1%E4%BC%98%E9%80%89/r3chakandp128185306.png" alt="r3chakandp128185306"></p>
<p>R3已经成功学习R1、R5发布的路由，此时所有路由都优选由R2通告的。</p>
<h2 id="修改AS-Path属性"><a href="#修改AS-Path属性" class="headerlink" title="修改AS_Path属性"></a>修改AS_Path属性</h2><p>在R1上通过路由策略修改BGP路由172.16.1.0&#x2F;24的 AS_Path属性值，使得R3优选R5发布的BGP路由172.16.1.0&#x2F;24。</p>
<p>#创建IP前缀列表1，匹配Loopback1接口路由</p>
<p>[R1]ip ip-prefix 1 permit 172.16.1.0 24 greater-equal 24 less-equal 24</p>
<p>#创建Route-Policy hcip，并创建节点10，在其中调用IP前缀列表1，修改AS_Path属性值</p>
<p>[R1]route-policy hcip permit node 10</p>
<p>[R1-route-policy] if-match ip-prefix 1</p>
<p>[R1-route-policy] apply as-path 300 400 additive</p>
<p>[R1-route-policy] quit</p>
<p>[R1]route-policy hcip permit node 20</p>
<p>注意创建一个空节点，对于另外3条BGP路由不执行任何操作。</p>
<p>#对向BGP对等体R2通告的BGP路由应用Route-Policy</p>
<p>[R1]bgp 100</p>
<p>[R1-bgp] peer 10.0.12.2 route-policy hcip export</p>
<p>#在R1上触发出方向的软复位，刷新对外通告的BGP路由</p>
<p><R1>refresh bgp all export</R1></p>
<p>#在R3上查看BGP路由172.16.1.0&#x2F;24的明细信息</p>
<p><img src="/2023/11/28/BGP%E8%B7%AF%E7%94%B1%E4%BC%98%E9%80%89/as5cs28190005.png" alt="as5cs28190005"></p>
<p>此时R3优选R4通告的BGP路由172.16.1.0&#x2F;24，R2通告的未被优选的原因是AS_Path长度。</p>
<h2 id="修改Local-Preference属性"><a href="#修改Local-Preference属性" class="headerlink" title="修改Local_Preference属性"></a>修改Local_Preference属性</h2><p>local_Preference：默认100，越大越优先，只能在ibgp对等体之间传递</p>
<p>在R4上通过路由策略修改BGP路由172.16.2.0&#x2F;24的Local_Preference属性值，使得R3优选R4通告的BGP路由172.16.2.0&#x2F;24。</p>
<p>#创建IP前缀列表1，匹配BGP路由172.16.2.0&#x2F;24</p>
<p>[R4]ip ip-prefix 1 permit 172.16.2.0 24 greater-equal 24 less-equal 24</p>
<p>#创建Route-Policy hcip，并创建节点10，在其中调用IP前缀列表1，修改Local_Preference属性值</p>
<p>[R4]route-policy hcip permit node 10</p>
<p>[R4-route-policy] if-match ip-prefix 1</p>
<p>[R4-route-policy] apply local-preference 200</p>
<p>[R4-route-policy] quit</p>
<p>[R4]route-policy hcip permit node 20</p>
<p>注意创建一个空节点，对于另外3条BGP路由不执行任何操作。</p>
<p>#对向BGP对等体R3通告的BGP路由应用Route-Policy</p>
<p>[R4]bgp 64512</p>
<p>[R4-bgp] peer 10.0.3.3 route-policy hcip export</p>
<p>#在R4上触发出方向的软复位，刷新对外通告的BGP路由</p>
<p><R4>refresh bgp all export</R4></p>
<p>#在R3上查看BGP路由172.16.2.0&#x2F;24的明细信息</p>
<p><img src="/2023/11/28/BGP%E8%B7%AF%E7%94%B1%E4%BC%98%E9%80%89/local55chakan192014.png" alt="local55chakan192014"></p>
<p>此时R3优选R4通告的BGP路由172.16.2.0&#x2F;24，R2通告的BGP路由其Local_Preference值为100，小于R3通告的BGP路由Local_Preference值200，因此R2通告的BGP路由未被优选。</p>
<h2 id="修改MED属性"><a href="#修改MED属性" class="headerlink" title="修改MED属性"></a>修改MED属性</h2><p>在R2上通过路由策略修改BGP路由172.16.3.0&#x2F;24的MED属性值，使得R3优选R5发布的BGP路由172.16.3.0&#x2F;24。</p>
<p>#创建IP前缀列表1，匹配BGP路由172.16.3.0&#x2F;24</p>
<p>[R2]ip ip-prefix 1 permit 172.16.3.0 24 greater-equal 24 less-equal 24</p>
<p>#创建Route-Policy hcip，并创建节点10，在其中调用IP前缀列表1，修改MED属性值</p>
<p>[R2]route-policy hcip permit node 10</p>
<p>[R2-route-policy] if-match ip-prefix 1</p>
<p>[R2-route-policy] apply cost 200</p>
<p>[R2-route-policy] quit</p>
<p>[R2]route-policy hcip permit node 20</p>
<p>注意创建一个空节点，对于另外3条BGP路由不执行任何操作。</p>
<p>#对来自BGP对等体R1的BGP路由应用Route-Policy</p>
<p>[R2]bgp 64512</p>
<p>[R2-bgp] peer 10.0.12.1 route-policy hcip import</p>
<p>#在R2上触发入方向的软复位，刷新接收到的BGP路由</p>
<p><R2>refresh bgp all import</R2></p>
<p>#在R3上配置允许比较来自不同AS的BGP路由的MED值</p>
<p>[R3]bgp 64512</p>
<p>[R3-bgp] compare-different-as-med  </p>
<p>缺省情况下，不比较来自不同AS邻居的BGP的MED属性值。</p>
<p>#在R3上查看BGP路由172.16.3.0&#x2F;24的明细信息</p>
<p><img src="/2023/11/28/BGP%E8%B7%AF%E7%94%B1%E4%BC%98%E9%80%89/medchakanf2735.png" alt="medchakanf2735"></p>
<p>R2通告的BGP路由172.16.3.0&#x2F;24其MED值为200，而R4通告BGP路由MED值为0，R3优选MED值较小的BGP路由，因此R2通告的BGP路由未被优选。</p>
<h2 id="修改preferred-value属性"><a href="#修改preferred-value属性" class="headerlink" title="修改preferred-value属性"></a>修改preferred-value属性</h2><p>preferred-value：华为特有的属性值，仅在本地有效，当bgp存在到相同的路由时，将优选prefeerred-value大的路由。只能在路由器本地配置，只影响本设备的路由优选，不会传递给任何bgp对等体。</p>
<p>在R3上通过路由策略修改BGP路由172.16.4.0&#x2F;24的preferred-value属性值，使得R3优选R4通告的BGP路由172.16.4.0&#x2F;24。</p>
<p>#创建IP前缀列表1，匹配BGP路由172.16.4.0&#x2F;24</p>
<p>[R3]ip ip-prefix 1 permit 172.16.4.0 24 greater-equal 24 less-equal 24</p>
<p>#创建Route-Policy hcip，并创建节点10，在其中调用IP前缀列表1，修改preferred-value属性值</p>
<p>[R3]route-policy hcip permit node 10</p>
<p>[R3-route-policy] if-match ip-prefix 1</p>
<p>[R3-route-policy] apply preferred-value 300</p>
<p>[R3-route-policy] quit</p>
<p>[R3]route-policy hcip permit node 20</p>
<p>注意创建一个空节点，对于另外3条BGP路由不执行任何操作。</p>
<p>#对来自BGP对等体R4的BGP路由应用Route-Policy</p>
<p>[R3]bgp 64512</p>
<p>[R3-bgp] peer 10.0.4.4 route-policy hcip import</p>
<p>#在R3上触发入方向的软复位，刷新收到的BGP路由</p>
<p><R3>refresh bgp all import</R3></p>
<p>#在R3上查看BGP路由172.16.4.0&#x2F;24的明细信息</p>
<p><img src="/2023/11/28/BGP%E8%B7%AF%E7%94%B1%E4%BC%98%E9%80%89/prexiiuhai8193458.png" alt="prexiiuhai8193458"></p>
<p>R4通告的BGP路由172.16.3.0&#x2F;24其preferred-value值为300，而R2通告的preferred-value值为0，R3优选preferred-value值较大的BGP路由，因此R3优选R4通告的BGP路由。</p>
]]></content>
      <categories>
        <category>ip实验</category>
      </categories>
      <tags>
        <tag>BGP路由优选</tag>
      </tags>
  </entry>
  <entry>
    <title>FTP实验</title>
    <url>/2023/11/30/FTP%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="File-Transfer-Protocol-文件传输协议"><a href="#File-Transfer-Protocol-文件传输协议" class="headerlink" title="File Transfer Protocol 文件传输协议"></a>File Transfer Protocol 文件传输协议</h1><p>FTP服务器开启21号端口进行控制连接，20号端口与客户端建立数据连接</p>
<p>ASCII ((American Standard Code for Information Interchange): 美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言，它是最通用的信息交换标准。</p>
<p>FTP是用来传送文件的协议。使用FTP实现远程文件传输的同时，还可以保证数据传输的可靠性和高效性。</p>
<p>FTP 是基于客户———服务器（C&#x2F;S）模型而设计的，在客户端与 FTP 服务器之间建立两个连接</p>
<h2 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h2><p>FTP支持两种方式的传输：文本（ASCII）方式和二进制（Binary）方式。通常文本文件的传输采用ASCII方式，而图象、声音文件、加密和压缩文件等非文本文件采用二进制方式传输，如果为了从一个系统上传输文件而使用了与本地系统不同的计算机字节位数，那么就必须使用Tenex模式。FTP以ASCII方式作为缺省的文件传输方式。</p>
<h2 id="传输过程"><a href="#传输过程" class="headerlink" title="传输过程"></a>传输过程</h2><p> 使用FTP进行文件传输时，会使用两个TCP连接。第一个连接是FTP客户端和FTP服务器间的控制连接。FTP服务器开启21号端口，等待FTP客户端发送连接请求。FTP客户端随机开启端口，向服务器发送建立连接的请求。控制连接用于在服务器和客户端之间传输控制命令。<br>        第二个连接是FTP客户端和FTP服务器间的数据连接。服务器使用TCP的20号端口与客户端建立数据连接。通常情况下，服务器主动建立或中断数据连接。</p>
<h2 id="FTP服务器配置"><a href="#FTP服务器配置" class="headerlink" title="FTP服务器配置"></a>FTP服务器配置</h2><p>路由器和X7系列交换机均可提供FTP功能。<br>执行ftp server enable命令使能FTP功能。<br>执行set default ftp-directory命令设置FTP用户的默认工作目录。</p>
<p>在配置FTP服务器时，可以使用AAA为每个用户分别配置登录账号和访问权限。 aaa命令用来进入AAA视图。</p>
<p>  local-user user-name { access-limit max-number | ftp-directory directory | idle-timeout         minutes [ seconds ] | password cipher password [ opt ]         | privilege level level | state {active | block } } *命令用来创建本地用户，并配置本地用户的各项参数。</p>
<pre><code>  user-name指定用户名。
    local-user huawei service-type ftp命令用来配置本地用户的接入类型为ftp。
    ftp-directory指定FTP用户可访问的目录。如果不配置FTP用户可访问的目录，则FTP用户无法登录设备。
    access-limit指定用户名可建立的最大连接数目。
    idle-timeout指定用户的闲置超时时间。
    privilege level指定用户的优先级。
</code></pre>
<h2 id="命令详解"><a href="#命令详解" class="headerlink" title="命令详解"></a>命令详解</h2><h3 id="idle-timeout"><a href="#idle-timeout" class="headerlink" title="idle-timeout"></a>idle-timeout</h3><p><strong>idle-timeout</strong>命令用来设置用户连接的超时时间。</p>
<p><strong>undo idle-timeout</strong>命令用来恢复超时时间的缺省值。</p>
<p>缺省情况下，用户连接的超时时间是5分钟。</p>
<p>命令格式</p>
<p><strong>idle-timeout</strong> <em>minutes</em> [ <em>seconds</em> ]</p>
<p><strong>undo idle-timeout</strong></p>
<table>
<thead>
<tr>
<th align="left"><em>minutes</em></th>
<th>指定用户界面断连的超时时间的分钟数。</th>
<th>整数形式，取值范围是0～35791，单位是分钟。</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>seconds</em></td>
<td>指定用户界面断连的超时时间的秒数。</td>
<td>整数形式，取值范围是0～59，单位是秒</td>
</tr>
</tbody></table>
<p>缺省级别</p>
<p>3：管理级</p>
<ul>
<li>设置执行命令<strong>idle-timeout</strong> <strong>0 0</strong>即关闭用户界面的超时断连功能。</li>
<li>如果用户界面没有设置闲置断连功能，则会导致已登录的用户始终处于连接状态，给设备带来安全风险，同时还有可能导致其他用户无法获得连接。</li>
<li>通常情况下，推荐设置用户界面断连的超时时间在10～15分钟之间。</li>
</ul>
<p># 设置超时为1分钟30秒。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">idle-timeout 1 30</span><br></pre></td></tr></table></figure>



<h3 id="local-user-privilege-level"><a href="#local-user-privilege-level" class="headerlink" title="local-user privilege level"></a>local-user privilege level</h3><p>必须配置在3以上，否则ftp连接无法成功</p>
<p><strong>local-user privilege level</strong>命令用来配置本地用户的优先级。</p>
<p><strong>undo</strong> <strong>local-user privilege level</strong>命令用来将本地用户的优先级恢复为缺省配置。</p>
<p>缺省情况下，本地用户（如Telnet用户、SSH用户）的优先级由管理模块来决定。</p>
<p>命令格式</p>
<p><strong>local-user</strong> <em>user-name</em> <strong>privilege level</strong> <em>level</em></p>
<p><strong>undo local-user</strong> <em>user-name</em> <strong>privilege level</strong></p>
<table>
<thead>
<tr>
<th><em>user-name</em></th>
<th>用户名。</th>
<th>字符串形式，不支持空格，不区分大小写，长度范围是1~64。</th>
</tr>
</thead>
<tbody><tr>
<td><em>level</em></td>
<td>用户的优先级。</td>
<td>整数形式，取值范围是0~15，取值越大，用户的优先级越高。缺省级别是0级。不同级别的用户登录后，只能使用等于或低于自己级别的命令</td>
</tr>
</tbody></table>
<p>缺省情况下，命令级别分为0~3级：</p>
<ul>
<li>级别0即参观级，网络诊断工具命令（ping、tracert）、从本设备出发访问外部设备的命令（包括：Telnet 客户端、SSH）等。该级别命令不允许进行配置文件保存的操作。</li>
<li>级别1即监控级，用于系统维护，包括display命令。该级别命令不允许进行配置文件保存的操作。</li>
<li>级别2即配置级，可以使用业务配置命令，包括路由、各个网络层次的命令，向用户提供直接网络服务。</li>
<li>级别3即管理级，用于系统基本运行的命令，对业务提供支撑作用，包括文件系统、FTP、TFTP、配置文件切换命令、备板控制命令、用户管理命令、命令级别设置命令、系统内部参数设置命令；用于业务故障诊断的debugging命令。</li>
</ul>
<h3 id="access-limit"><a href="#access-limit" class="headerlink" title="access-limit"></a>access-limit</h3><p><strong>access-limit</strong>命令用来配置当前域允许接入的用户数。</p>
<p><strong>undo access-limit</strong>命令用来恢复缺省配置。</p>
<p>缺省情况下，不限制接入的用户数目。</p>
<p>命令格式</p>
<p><strong>access-limit</strong> <em>max-number</em></p>
<p><strong>undo access-limit</strong></p>
<table>
<thead>
<tr>
<th><em>max-number</em></th>
<th>指定允许接入的用户数。</th>
<th>整数形式，取值范围是0～283648。</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>为了更方便地管理用户访问设备，可以限制域下用户的在线数量。</p>
<p><strong>注意事项</strong></p>
<p>执行这条配置命令后，当接入用户数大于允许的用户数时，系统不再允许用户接入系统，提示用户认证失败。</p>
<p><strong>access-limit</strong>命令对一个域下所能接入的用户总数进行限制，不区分接入用户的类型。</p>
<p># 设置当前域最多允许接入100个用户。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">access-limit 100</span><br></pre></td></tr></table></figure>



<h3 id="local-user-ftp-directory"><a href="#local-user-ftp-directory" class="headerlink" title="local-user ftp-directory"></a>local-user ftp-directory</h3><p><strong>local-user ftp-directory</strong>命令用来配置本地用户的FTP目录。</p>
<p><strong>undo local-user ftp-directory</strong>命令用来将本地用户的FTP目录恢复为缺省配置。</p>
<p>缺省情况下，本地用户的FTP目录为空。</p>
<p>当需要将设备配置为FTP服务器，从而便于本地用户以FTP方式登录设备，对设备上的文件进行增加、删除、修改等操作时，可以通过本命令配置本地用户以FTP方式登录设备后所处的目录。</p>
<p>不指定该目录时，本地用户无法以FTP方式登录设备。</p>
<p>配置本地用户的FTP目录时，该用户必须已由local-user password命令建立。</p>
<h3 id="local-user-password"><a href="#local-user-password" class="headerlink" title="local-user password"></a>local-user password</h3><p><strong>local-user password</strong>命令用来创建一个本地用户并配置该用户的登录密码，或者修改已创建用户的登录密码。</p>
<p><strong>undo local-user</strong>命令用来删除一个本地用户。</p>
<p>缺省情况下，系统没有本地用户。</p>
<p><strong>local-user</strong> <em>user-name</em> <strong>password</strong> [ <strong>cipher</strong> <em>password</em> | <strong>irreversible-cipher</strong> <em>irreversible-cipher-password</em> ]</p>
<p><strong>undo local-user</strong> <em>user-name</em></p>
<p><strong>cipher</strong> <em>password</em></p>
<p>指定密文密钥。密钥以明文或密文形式输入，但配置文件中保存为密文形式。</p>
<p><strong>irreversible-cipher</strong> <em>irreversible-cipher-password</em></p>
<p>指定不可逆密文密钥。密钥以明文或不可逆密文形式输入，但配置文件中保存为密文形式。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.FTP服务器需要开启TCP的21号端口来建立控制连接，20号端口来建立数据连接。</p>
<p>2.如果用户无权访问任何工作目录，则需要定义一个默认的FTP目录。执行set default ftp-directory <directory location>命令建立默认目录。</directory></p>
<h2 id="FTP实验"><a href="#FTP实验" class="headerlink" title="FTP实验"></a>FTP实验</h2><p>R1 做为FTP Server 进行配置<br>R2 做为Client 测试</p>
<p>R1：<br>undo ter mo<br>sys<br>sysname R1<br>int g0&#x2F;0&#x2F;0<br>ip add 192.168.1.1 24</p>
<p>R2：<br>undo ter mo<br>sys<br>sysname R2<br>int g0&#x2F;0&#x2F;0<br>ip add 192.168.1.2 24</p>
<p><img src="/2023/11/30/FTP%E5%AE%9E%E9%AA%8C/ftp1130183749.png" alt="ftp1130183749"></p>
<p>R1:<br>ftp server enable<br>set default ftp-directory flash:&#x2F;</p>
<p>（设置默认目录为flash:&#x2F;）</p>
<p><strong>ftp server enable</strong>命令用来开启设备的FTP服务器功能，允许FTP用户登录。缺省情况下，FTP服务器功能处于关闭状态。</p>
<p>其他可选的配置参数还包括：指定FTP服务器端口号、指定FTP服务器的源地址和配置FTP连接空闲时间等。</p>
<p>R1：</p>
<p>通过在AAA中设置用户名和密码（均为huawei）<br>aaa<br>local-user huawei password cipher huawei<br>local-user huawei service-type ftp<br>local-user huawei ftp-directory flash:&#x2F;<br>local-user huawei access-limit 200<br>local-user huawei idle-timeout 0 0<br>local-user huawei privilege level 3</p>
<p>查看ftp server配置信息</p>
<p><img src="/2023/11/30/FTP%E5%AE%9E%E9%AA%8C/diskvk30184121.png" alt="diskvk30184121"></p>
<p>R2登录FTP服务器</p>
<p><img src="/2023/11/30/FTP%E5%AE%9E%E9%AA%8C/ftpdenglu1130184259.png" alt="ftpdenglu1130184259"></p>
<p>在R1和R2上分别保存文件text1.cfg和text2.cfg，用于后续测试</p>
<p>R1：save text1.cfg</p>
<p>R2：save text2.cfg</p>
<p>R2上通过dir命令查看服务器上的文件</p>
<p><img src="/2023/11/30/FTP%E5%AE%9E%E9%AA%8C/dirr2184558.png" alt="dirr2184558"></p>
<p>R2从服务器上下载text1.cfg文件，并改名为newtext1.cfg</p>
<p><img src="/2023/11/30/FTP%E5%AE%9E%E9%AA%8C/xiazaigaiming0184834.png" alt="xiazaigaiming0184834"></p>
<p>R2本地查看dir</p>
<p><img src="/2023/11/30/FTP%E5%AE%9E%E9%AA%8C/r2bendichakan30184952.png" alt="r2bendichakan30184952"></p>
<p>put把本地文件text2.cfg上传到服务器，并改名为newtext2.cfg</p>
<p><img src="/2023/11/30/FTP%E5%AE%9E%E9%AA%8C/putnew85130.png" alt="putnew85130"></p>
<p>查看是否上传成功</p>
<p><img src="/2023/11/30/FTP%E5%AE%9E%E9%AA%8C/yanzg5227.png" alt="yanzg5227"></p>
<p>关闭ftp连接：bye</p>
]]></content>
      <categories>
        <category>ip实验</category>
      </categories>
      <tags>
        <tag>FTP</tag>
      </tags>
  </entry>
  <entry>
    <title>Hybrid接口</title>
    <url>/2023/12/05/Hybrid%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h1 id="接口属性"><a href="#接口属性" class="headerlink" title="接口属性"></a>接口属性</h1><p>​	交换机接口的类型，可以是Access、Trunk和Hybrid。Access类型的接口仅属于一个VLAN,,,,只能接收、转发相应VLAN的帧；而Trunk类型接口则默认属于所有VLAN任何Tagged帧都能经过Trunk接收和转发； Hybrid类型接口则介于二者之间，可自主定义端口上能接收和转发那些VLAN Tag帧，并可决定VLAN Tag是否继续携带或者剥离。。Access和Trunk类型接口是Hybrid类型接口的两个特例，，，一个仅支持一个VLAN传递，，一个默认支持所有VLAN的传递，而Access类型和Trunk类型的接口能做到的，Hybrid接口都能做到。</p>
<p>​    hybrid属性具有trunk和access两种端口属性的特点，tag类似trunk，untag类似access，但是又不同，因为hybrid端口可以接收某个或者多个vlan的数据。</p>
<p>在开始研究之前强调几点：</p>
<p>1、在hybrid端口中，所有端口都默认属于vlan1，除非配置undo port hybrid vlan 1 才能将该hybrid剔除出vlan1，可以使用display vlan 查看端口所属的vlan</p>
<p>2、在hybrid端口中，无论是tag还是untag后面配置的vlan-id就是该hybrid端口所能够收到vlan数据的vlan-id，换句话说就是这些vlan中发出的数据该端口都能收到，可以使用display vlan查看（这里注意虽然可以收到这些vlan的数据但是严格意义上讲hybrid端口并不属于任何一个vlan）</p>
<p>3、所有类型端口的默认pvid都是vlan1，而pvid这个属性只！针对！进入！该端口的！没有标签的！普通数据包有效，作用是将没有标签的普通数据包打上pvid中配置的标签号</p>
<p>4、hybrid属性中，tag是针对于端口的接收方向的（从该端口进来的流量允许带有这些vlan标签的通过），untag是针对端口的发送方向的（从该端口出去的流量去除这些vlan标签）</p>
<p>5、加入一个hybrid端口配置tag vlan 2 3和untag vlan 4 5 ，那么默认情况下这个hybrid属于vlan1、2、3、4、5，在display vlan中可以查看到，只有端口属于了某个vlan，那么该端口才能收到某个vlan的数据包，这一点是理解下列两种配置和hybrid端口属性的关键！！！</p>
<h1 id="收发过程"><a href="#收发过程" class="headerlink" title="收发过程"></a>收发过程</h1><p>在数据发送时untag列表的原理，如下图<br>1.带有vlan 3标签的数据从F0&#x2F;0接口出去，通过时查看untag列表，发现有对应的标签，将标签脱掉发送出去<br>2.带有vlan 8标签的数据从F0&#x2F;1接口出去，通过时查看untag列表，发现没有对应的标签，继续查看tag表，发现有对应标签，所以直接带有vlan 8标签的数据发送出去<br>3.带有vlan 5标签的数据从F0&#x2F;2接口出去，通过时查看untag列表，发现没有对应的标签 ，继续查看tag列表，发现也没有对应的标签，所以数据直接被丢弃<br><img src="/2023/12/05/Hybrid%E6%8E%A5%E5%8F%A3/shoufa6505133622.png" alt="shoufa6505133622"></p>
<p>tag列表处理数据帧的接收和发送的原理，如下图<br>1.没有标签的数据进入F0&#x2F;0接口，接口查看到数据没有标签，根据接口PVID&#x3D;3，将vlan 3标签打入数据<br>2.带有vlan 9标签的数据进入接口F0&#x2F;1，接口查看到数据带有标签，接着查看tag列表，发现列表中存在对应标签，放通数据<br>3.带有vlan 5标签的数据从接口F0&#x2F;2出去，接口查看到数据带有标签，查看untag列表，发现列表中没有对应vlan 5标签，继续查看tag列表，发现列表中存在对应标签vlan 5，放通数据出去<br>4.带有vlan 3标签的数据从F0&#x2F;2接口出去，查看untag列表，发现列表中存在对应vlan 3标签，将标签脱掉，放通数据出去<br>5.带有vlan 9标签的数据从F0&#x2F;2接口出去，查看untag表，发现列表中不存在对应vlan 9标签，继续查看tag列表，发现列表中不存在vlan 9标签，将数据丢弃</p>
<p><img src="/2023/12/05/Hybrid%E6%8E%A5%E5%8F%A3/fataf2133722.png" alt="fataf2133722"></p>
<h1 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h1><p><img src="/2023/12/05/Hybrid%E6%8E%A5%E5%8F%A3/tuo2205133307.png" alt="tuo2205133307"></p>
<p>1、为了让我们更加简洁的理解hydrid的属性，首先在所有的端口上移除了vlan1这个默认有的vlan，假设为所有端口初始不属于任何vlan，都不能相互之间通信</p>
<p>2、pvid是当普通的主机数据帧进入交换机端口后被打上的vlan-tag的属性，在途中可以看出PC1、PC2、PC3的流量在进入交换机的时候分别会被打上vlan2、vlan3、vlan99的vlan标签</p>
<p>3、untag后面的vlan就是该端口属于的vlan，那么不难看出LSW1的G0&#x2F;0&#x2F;1属于vlan2、3，G0&#x2F;0&#x2F;2属于vlan2、10，G0&#x2F;0&#x2F;3属于vlan3、10，而untag的动作是在流量出端口去往主机的时候把vlan-tag全部去除，那么不难看出LSW1的G0&#x2F;0&#x2F;1将去除vlan2、3的标签，G0&#x2F;0&#x2F;2去除vlan2、10的标签，G0&#x2F;0&#x2F;3去除vlan3、10的标签（还原成普通帧）</p>
<p>LSW2的G0&#x2F;0&#x2F;1属于vlan99，G0&#x2F;0&#x2F;2属于vlan99，在流量出端口的时候会去除vlan99的标签（还原成普通帧）</p>
<p>那么PC1与PC2的通信现在分析如下：当PC1发送arp去请求PC2的MAC地址的时候，PC1会将数据包广播发往LSW1的G0&#x2F;0&#x2F;2接口，LSW1收到后发现是个普通的不带标签的数据帧，于是根据接口的pvid给该帧打上vlan2的tag，然后往vlan2中进行泛红，无奈G0&#x2F;0&#x2F;3端口只属于vlan3、10所以无法收到vlan2中的泛红，故PC1与PC2通信失败。</p>
<p>下面再来分析PC1与PC3通信：前面已经分析了PC1要去请求PC3的MAC，被LSW1的G0&#x2F;0&#x2F;2收到，并且打上vlan2的tag，然后在vlan2中泛红，那么在vlan2中的端口就都能收到该泛红了，所以在配置了untag vlan 2 3的G0&#x2F;0&#x2F;1端口自然也能收到vlan2和vlan3的泛红并转发出去，但是LSW1发现G0&#x2F;0&#x2F;1配置untag vlan2 3，所以将从该端口发送出去的所有带有vlan2和vlan3的数据包的tag全部去除（还原成普通帧），然后这个普通的帧就会发往LSW2被G0&#x2F;0&#x2F;1端口接收到，LSW2发现了一个普通的帧，那么就会用到pvid了不是，所以LSW2收到这个帧后打上vlan99的tag进行泛红，那么PC3所在的hybrid因为配置有untag vlan99必然能够收到vlan99的数据包了，然后在G0&#x2F;0&#x2F;2发给PC3的时候将vlan99的tag去除掉，PC3收到的就是一个不带任何tag的普通包（PC3完全不知道在它个PC1之间还有SW这种东西存在），好了PC3收到了PC1发来的arp请求，那么作为有礼貌的人应该回复自己的MAC地址了，与回一个arp响应给PC1，</p>
<p>下面PC3的回包分析：PC3使用PC1的MAC和ip封装好数据包后从网卡发送出去，LSW2的G0&#x2F;0&#x2F;2端口收到了，发现是一个普通帧，OK来pvid打上vlan99的tag，然后查看mac地址表发现PC1的MAC地址在G0&#x2F;0&#x2F;1口，在查看vlan信息，发现G0&#x2F;0&#x2F;1口可以接收vlan99的数据（untag vlan99），两个转发条件都满足了，那么久把数据包发给G0&#x2F;0&#x2F;1转发，G0&#x2F;0&#x2F;1转发的时候根据untag vlan99把数据包vlan-id去除还原成普通帧，被LSW1的G0&#x2F;0&#x2F;1收到，按照pvid的惯例，普通帧被打上了pvid vlan10的tag（用vlan10举例，也可以是任意vlan），然后LSW1根据MAC地址表找到PC1在自己的G0&#x2F;0&#x2F;2口，再查看vlan信息发现G0&#x2F;0&#x2F;2接口配置了untag vlan2 10，可以接收vlan10的数据包，于是就把这个被打上vlan10的PC3发来的arp响应通过G0&#x2F;0&#x2F;2发送给了PC1，当然在从G0&#x2F;0&#x2F;2接口出去的时候根据untag vlan2 10的配置将vlan10的tag去除还原成一个普通的帧，PC1收到的是一个普通的帧，完全不知道它和PC3之间还有交换机这个东西。好了，这就是一次通信过程，PC2与PC3的通信原理也是一样的，于是就实现了PC3与PC1、PC2互通，PC1与PC2之间不通的效果。</p>
]]></content>
      <categories>
        <category>ip实验</category>
      </categories>
      <tags>
        <tag>hybrid</tag>
        <tag>tag</tag>
      </tags>
  </entry>
  <entry>
    <title>VRRP基础实验</title>
    <url>/2023/11/29/VRRP%E5%9F%BA%E7%A1%80%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<p>设备连接方式如图所示，网络中存在VLAN10、20，每个VLAN中部署一组VRRP，使用与VLAN ID相同的数值作为VRID，将S1配置为VLAN10的VRRP Master，将S2配置为VLAN20的VRRP Master。</p>
<p>同时在S1、S2、S3上部署MSTP，创建Instance 1、2，将VLAN10映射到MSTI 1、VLAN20映射到MSTI 2，将S1配置为MSTI 1的主根桥、MSTI 2的备份根桥，而将S2配置为MSTI 1的备份根桥、MSTI 2的主根桥。</p>
<p>VLANIF接口地址使用10.0.x.y&#x2F;24，其中x为VRID组号，y为设备编号，VRIP使用10.0.x.254&#x2F;24。</p>
<p><img src="/2023/11/29/VRRP%E5%9F%BA%E7%A1%80%E5%AE%9E%E9%AA%8C/vrrptuopu29210315.png" alt="vrrptuopu29210315"></p>
<p>#创建VLAN</p>
<p>[S1]vlan batch 10 20</p>
<p>[S2]vlan batch 10 20 </p>
<p>[S3]vlan batch 10 20 </p>
<p>[S4]vlan batch 10 20 </p>
<p>#将所有互联接口配置为Trunk接口，放通对应VLAN</p>
<p>略</p>
<p>#修改STP模式为MSTP</p>
<p>[S1]stp mode mstp</p>
<p>[S2]stp mode mstp</p>
<p>[S3]stp mode mstp</p>
<p>#配置MSTP</p>
<p>[S1]stp region-configuration</p>
<p>[S1-mst-region] region-name hcip</p>
<p>[S1-mst-region] revision-level 1</p>
<p>[S1-mst-region] instance 1 vlan 10 </p>
<p>[S1-mst-region] instance 2 vlan 20</p>
<p>[S1-mst-region] active region-configuration</p>
<p>Info: This operation may take a few seconds. Please wait for a moment…done.</p>
<p>[S1-mst-region] quit</p>
<p>[S2]stp region-configuration</p>
<p>[S2-mst-region] region-name hcip</p>
<p>[S2-mst-region] revision-level 1</p>
<p>[S2-mst-region] instance 1 vlan 10 </p>
<p>[S2-mst-region] instance 2 vlan 20 </p>
<p>[S2-mst-region] active region-configuration</p>
<p>Info: This operation may take a few seconds. Please wait for a moment…done.</p>
<p>[S2-mst-region] quit</p>
<p>[S3]stp region-configuration</p>
<p>[S3-mst-region] region-name hcip</p>
<p>[S3-mst-region] revision-level 1</p>
<p>[S3-mst-region] instance 1 vlan 10 </p>
<p>[S3-mst-region] instance 2 vlan 20 </p>
<p>[S3-mst-region] active region-configuration</p>
<p>Info: This operation may take a few seconds. Please wait for a moment…done.</p>
<p>[S3-mst-region] quit</p>
<p>#配置SW1为MSTI1的根桥、MSTI2的备份根桥</p>
<p>[S1]stp instance 1 root primary </p>
<p>[S1]stp instance 2 root secondary</p>
<p>#配置SW2为MSTI2的根桥、MSTI1的备份根桥</p>
<p>[S2]stp instance 1 root secondary </p>
<p>[S2]stp instance 2 root primary</p>
<p>#在S1上查看MSTI1的状态和统计信息摘要</p>
<p><img src="/2023/11/29/VRRP%E5%9F%BA%E7%A1%80%E5%AE%9E%E9%AA%8C/shili1129211309.png" alt="shili1129211309"></p>
<p>S1上所有接口都是指定接口，S1为MSTI1的根桥。</p>
<p>#在S2上查看MSTI2的状态和统计信息摘要</p>
<p><img src="/2023/11/29/VRRP%E5%9F%BA%E7%A1%80%E5%AE%9E%E9%AA%8C/shili229211338.png" alt="shili229211338"></p>
<p>S2上所有接口都是指定接口，S2为MSTI1的根桥。</p>
<h2 id="VRRP基础配置"><a href="#VRRP基础配置" class="headerlink" title="VRRP基础配置"></a>VRRP基础配置</h2><p>在S1、S2均创建VLANIF 10、20，分别加入VRRP组10、20，手动配置VRRP优先级，使得S1的VLAN10成为VRRP Master、S2的VLAN20成为VRRP Master。</p>
<p>#创建VLANIF</p>
<p>[S1]interface Vlanif10</p>
<p>[S1-Vlanif10] ip address 10.0.10.1 255.255.255.0</p>
<p>[S1-Vlanif10] quit</p>
<p>[S1]interface Vlanif20</p>
<p>[S1-Vlanif20] ip address 10.0.20.1 255.255.255.0</p>
<p>[S1-Vlanif20] quit</p>
<p>[S2]interface Vlanif10</p>
<p>[S2-Vlanif10] ip address 10.0.10.2 255.255.255.0</p>
<p>[S2-Vlanif10] quit</p>
<p>[S2]interface Vlanif20</p>
<p>[S2-Vlanif20] ip address 10.0.20.2 255.255.255.0</p>
<p>[S2-Vlanif20] quit</p>
<p>#S1上配置VRRP</p>
<p>[S1]interface Vlanif 10</p>
<p>[S1-Vlanif10] vrrp vrid 10 virtual-ip 10.0.10.254</p>
<p>[S1-Vlanif10] vrrp vrid 10 priority 120</p>
<p>[S1-Vlanif10] quit</p>
<p>[S1]interface Vlanif 20</p>
<p>[S1-Vlanif20] vrrp vrid 20 virtual-ip 10.0.20.254</p>
<p>[S1-Vlanif20] quit</p>
<p>配置VLAN10的VRRP优先级为120，VLAN20保持默认的100。</p>
<p>#S2上配置VRRP</p>
<p>[S2]interface Vlanif10</p>
<p>[S2-Vlanif10] vrrp vrid 10 virtual-ip 10.0.10.254</p>
<p>[S2-Vlanif10] quit</p>
<p>[S2]interface Vlanif20</p>
<p>[S2-Vlanif20] vrrp vrid 20 virtual-ip 10.0.20.254</p>
<p>[S2-Vlanif20] vrrp vrid 20 priority 120</p>
<p>[S2-Vlanif20] quit</p>
<p>配置VLAN20的VRRP优先级为120，VLAN10保持默认的100。</p>
<p>#查看VRRP组状态</p>
<p><img src="/2023/11/29/VRRP%E5%9F%BA%E7%A1%80%E5%AE%9E%E9%AA%8C/chakanvrrp1914.png" alt="chakanvrrp1914"></p>
<h2 id="配置VRRP与BFD联动进行快速切换"><a href="#配置VRRP与BFD联动进行快速切换" class="headerlink" title="配置VRRP与BFD联动进行快速切换"></a>配置VRRP与BFD联动进行快速切换</h2><p>在S1、S2上配置BFD单跳检测，检测VLANIF接口之间的连通性，将VRRP与BFD联动，当BFD会话状态Down时，增加VRRP Backup设备的优先级。</p>
<p>#在S1上配置BFD会话</p>
<p>[S1]bfd</p>
<p>[S1-bfd] quit</p>
<p>[S1]bfd vlanif10 bind peer-ip 10.0.10.2 interface Vlanif10</p>
<p>[S1-bfd-session-vlanif10] discriminator local 1</p>
<p>[S1-bfd-session-vlanif10] discriminator remote 2</p>
<p>[S1-bfd-session-vlanif10] min-tx-interval 100</p>
<p>[S1-bfd-session-vlanif10] min-rx-interval 100</p>
<p>[S1-bfd-session-vlanif10] commit</p>
<p>[S1-bfd-session-vlanif10] quit</p>
<p>[S1]bfd vlanif20 bind peer-ip 10.0.20.2 interface Vlanif20</p>
<p>[S1-bfd-session-vlanif20] discriminator local 11</p>
<p>[S1-bfd-session-vlanif20] discriminator remote 22</p>
<p>[S1-bfd-session-vlanif20] min-tx-interval 100</p>
<p>[S1-bfd-session-vlanif20] min-rx-interval 100</p>
<p>[S1-bfd-session-vlanif20] commit</p>
<p>[S1-bfd-session-vlanif20] quit</p>
<p>#在S2上配置BFD会话</p>
<p>[S2]bfd</p>
<p>[S2-bfd] quit</p>
<p>[S2]bfd vlanif10 bind peer-ip 10.0.10.1 interface Vlanif10</p>
<p>[S2-bfd-session-vlanif10] discriminator local 2</p>
<p>[S2-bfd-session-vlanif10] discriminator remote 1</p>
<p>[S2-bfd-session-vlanif10] min-tx-interval 100</p>
<p>[S2-bfd-session-vlanif10] min-rx-interval 100</p>
<p>[S2-bfd-session-vlanif10] commit</p>
<p>[S2-bfd-session-vlanif10] quit</p>
<p>[S2]bfd vlanif20 bind peer-ip 10.0.20.1 interface Vlanif20</p>
<p>[S2-bfd-session-vlanif20] discriminator local 22</p>
<p>[S2-bfd-session-vlanif20] discriminator remote 11</p>
<p>[S2-bfd-session-vlanif20] min-tx-interval 100</p>
<p>[S2-bfd-session-vlanif20] min-rx-interval 100</p>
<p>[S2-bfd-session-vlanif20] commit</p>
<p>[S2-bfd-session-vlanif20] quit</p>
<p>#检查BFD会话状态</p>
<p><img src="/2023/11/29/VRRP%E5%9F%BA%E7%A1%80%E5%AE%9E%E9%AA%8C/bfdahakan737.png" alt="bfdahakan737"></p>
<p>此时S1、S2上BFD会话状态都为Up。</p>
<p>#配置VRRP与BFD联动</p>
<p>[S1]interface Vlanif20</p>
<p>[S1-Vlanif20] vrrp vrid 20 track bfd-session 11 increased 30</p>
<p>[S1-Vlanif20] quit</p>
<p>[S2]interface Vlanif10</p>
<p>[S2-Vlanif10] vrrp vrid 10 track bfd-session 2 increased 30</p>
<p>[S2-Vlanif10] quit</p>
<p>注意，此处的bfd-session号为本地的BFD discriminator，只需要在Backup状态的接口上配置联动，BFD会话Down时增加本地的VRRP优先级。</p>
<p>#关闭S1上所有接口，模拟链路故障</p>
<p>[S1]interface GigabitEthernet0&#x2F;0&#x2F;10</p>
<p>[S1-GigabitEthernet0&#x2F;0&#x2F;10] shutdown</p>
<p>[S1-GigabitEthernet0&#x2F;0&#x2F;10] quit</p>
<p>[S1]interface GigabitEthernet0&#x2F;0&#x2F;11</p>
<p>[S1-GigabitEthernet0&#x2F;0&#x2F;11] shutdown</p>
<p>[S1-GigabitEthernet0&#x2F;0&#x2F;11] quit</p>
<p>[S1]interface GigabitEthernet0&#x2F;0&#x2F;12</p>
<p>[S1-GigabitEthernet0&#x2F;0&#x2F;12] shutdown</p>
<p>[S1-GigabitEthernet0&#x2F;0&#x2F;12] quit</p>
<p>#在S2上查看BFD会话状态</p>
<p><img src="/2023/11/29/VRRP%E5%9F%BA%E7%A1%80%E5%AE%9E%E9%AA%8C/yichang13038.png" alt="yichang13038"></p>
<p>此时两个BFD会话状态立马变为Down。</p>
<p>#在S2上查看VRRP组状态</p>
<p><img src="/2023/11/29/VRRP%E5%9F%BA%E7%A1%80%E5%AE%9E%E9%AA%8C/shuangzhu129213128.png" alt="shuangzhu129213128"></p>
<p>VRRP组10、20的Master此时都是S2。</p>
<p>#在S2上查看VRRP组的状态和配置参数信息</p>
<p><img src="/2023/11/29/VRRP%E5%9F%BA%E7%A1%80%E5%AE%9E%E9%AA%8C/canshufiejo9213200.png" alt="canshufiejo9213200"></p>
]]></content>
      <tags>
        <tag>VRRP</tag>
        <tag>BFD</tag>
      </tags>
  </entry>
  <entry>
    <title>nat实验</title>
    <url>/2023/11/25/nat%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="静态nat"><a href="#静态nat" class="headerlink" title="静态nat"></a>静态nat</h1><p>静态NAT实现了私有地址和公有地址的一对一映射。如果希望一台主机优先使用某个关联地址，或者想要外部网络使用一个指定的公网地址访问内部服务器时，可以使用静态NAT。但是在大型网络中，这种一对一的IP地址映射无法缓解公用地址短缺的问题。</p>
<span id="more"></span>

<p>静态NAT实现了私有地址和共有地址一对一的映射（一个私有地址对应一个共有地址），并没有做到缓解地址短缺的问题，只是做到了地址转换。</p>
<p>一个公网地址只会分配给唯一且固定的内网地址</p>
<p><img src="/2023/11/25/nat%E5%AE%9E%E9%AA%8C/jingttuopu4509.png" alt="jingttuopu4509"></p>
<p>如图配置ip地址和网关</p>
<p><img src="/2023/11/25/nat%E5%AE%9E%E9%AA%8C/jingta15204327.png" alt="jingta15204327"></p>
<p>r1上配置静态nat（注意是在公网的接口上，出接口）</p>
<p>注意配置一条静态路由，不然没有路由的下一跳会被丢弃</p>
<p>在r1上查看nat映射关系：dis nat static</p>
<p>验证一下：<img src="/2023/11/25/nat%E5%AE%9E%E9%AA%8C/jingtainatjg25204222.png" alt="jingtainatjg25204222"></p>
<p>发现去往2.2.2.2的源地址变为2.2.2.3，说明nat完成转换。</p>
<p>静态nat两种配置方式：</p>
<p>1.接口下（上述实验采用这种方式）：进入到连接外网路由器的出接口下，然后在接口视图下配置nat映射关系</p>
<p>2.全局：在全局视图下，配置好nat映射关系，再进入到出接口，执行：nat static enable</p>
<h1 id="动态nat"><a href="#动态nat" class="headerlink" title="动态nat"></a>动态nat</h1><p>动态NAT通过使用地址池来实现。</p>
<p>如上图，当内部主机A和主机B需要与公网中的目的主机通信时，网关RTA会从配置的公网地址池中选择一个未使用的公网地址与之做映射。每台主机都会分配到地址池中的一个唯一地址。当不需要此连接时，对应的地址映射将会被删除，公网地址也会被恢复到地址池中待用。当网关收到回复报文后，会根据之前的映射再次进行转换之后转发给对应主机。</p>
<p>注意：</p>
<p>动态NAT实际上实现的还是私有地址和公有地址一对一的关系，但是共有地址不再绑定给特定的内网地址。实现了一定程度的缓解地址短缺问题。<br>动态NAT地址池中的地址用尽以后，只能等待被占用的公用IP被释放后，其他主机才能使用它来访问公网。<img src="/2023/11/25/nat%E5%AE%9E%E9%AA%8C/dongtaitu00800.png" alt="dongtaitu00800"></p>
<h2 id="动态NAT转换流程："><a href="#动态NAT转换流程：" class="headerlink" title="动态NAT转换流程："></a>动态NAT转换流程：</h2><p>1）路由器上配置一个内部地址池（公司内部所有主机用到的私有IP）动态映射一个外部地址池（所购买的公有IP）。<br>2）当有一个内网主机访问外网时，路由器首先查看NAT地址转换表；<br>3）若无，则再查看是否配置了动态NAT映射，若配置，则将IP包头中的源IP与内部地址池进行匹配，若有匹配项，则将该内网IP从内部地址池中取出，同时取出外部地址池中的一个IP地址，动态形成NAT地址转换表。注意，外部地址池的公网IP地址取出后，外部地址池中将没有该公网IP了。<br>4）默认当该主机24小时没有联系外网时，该动态NAT条目会自动消失，所被取出的公私有地址重新回到地址池中。</p>
<p><img src="/2023/11/25/nat%E5%AE%9E%E9%AA%8C/tuopudawda12714.png" alt="tuopudawda12714"></p>
<p>ip如图，pc的网关192.168.1.254</p>
<p>r1上配置默认路由，ip route-static 0.0.0.0 0 172.16.1.2</p>
<p>r1上配置动态地址池：</p>
<p><img src="/2023/11/25/nat%E5%AE%9E%E9%AA%8C/acldongtai2005212357.png" alt="acldongtai2005212357"></p>
<p>地址池验证：</p>
<p><img src="/2023/11/25/nat%E5%AE%9E%E9%AA%8C/dizhichi1201.png" alt="dizhichi1201"></p>
<p>配置acl策略：</p>
<p><img src="/2023/11/25/nat%E5%AE%9E%E9%AA%8C/acl55da612432.png" alt="acl55da612432"></p>
<p>在r1的外网出接口上调用：</p>
<p><img src="/2023/11/25/nat%E5%AE%9E%E9%AA%8C/natout25212448.png" alt="natout25212448"></p>
<p>验证：</p>
<p><img src="/2023/11/25/nat%E5%AE%9E%E9%AA%8C/dongtaijiegy12547.png" alt="dongtaijiegy12547"></p>
<p>其中源IP为3、4、5不定，说明是在动态分配外网地址。动态NAT配置完成。</p>
<p>在动态NAT实验中，最后利用PC1测试连通性时，间歇性会丢包</p>
<p>可能的原因：ping的时候默认按地址池中可用地址顺序从1~254进行地址转换，放大nat地址池可解决。</p>
<h1 id="NAPT"><a href="#NAPT" class="headerlink" title="NAPT"></a>NAPT</h1><p><img src="/2023/11/25/nat%E5%AE%9E%E9%AA%8C/NApttu39.png" alt="NApttu39"></p>
<p>如上图，RTA收到一个私网主机发送的报文，源IP地址是192.168.1.1，源端口号是1025，目的IP地址是100.1.1.1，目的端口是80。RTA会从配置的公网地址池中选择一个空闲的公网IP地址和端口号，并建立相应的NAPT表项。这些NAPT表项指定了报文的私网IP地址和端口号与公网IP地址和端口号的映射关系。之后，RTA将报文的源IP地址和端口号转换成公网地址200.10.10.1和端口号2843，并转发报文到公网。当网关RTA收到回复报文后，会根据之前的映射表再次进行转换之后转发给主机A。主机B同理。</p>
<p>注意：</p>
<p>NAPT技术允许多个内部地址映射到同一个公有地址的不同端口。<br>NAPT实现了私有地址对共有地址多对一</p>
<p>相当于一种特殊的动态nat</p>
<p>1、端口NAT和动态NAT的配置过程基本一致，只是在应用到接口时，配置命令少no-pat<br>2、端口NAT一个地址可以给多个源地址转换，不是单对单的转换，所以节省了nat地址！<br>3、端口NAT实际应用较多，静态NAT和动态NAT因为地址不能节约，所以实际应用少</p>
<h1 id="Easy-IP"><a href="#Easy-IP" class="headerlink" title="Easy IP"></a>Easy IP</h1><p><img src="/2023/11/25/nat%E5%AE%9E%E9%AA%8C/easydahwka5.png" alt="easydahwka5"></p>
<p>Easy IP本质上是NAPT（所以原理与NAPT大致相似）<br>由于网关设备出接口IP地址为公网地址，所以可以利用该<strong>出接口地址</strong>来作为地址转换的公有地址。<br>Easy IP适用于小规模局域网中的主机访问Internet的场景。小规模局域网通常部署在小型的网吧或者办公室中，这些地方内部主机不多，出接口可以通过拨号方式获取一个临时公网IP地址。Easy IP可以实现内部主机使用这个临时公网IP地址访问Internet。</p>
<p>Easy IP适用于小规模局域网中的主机访问Internet的场景。小规模局域网通常部署在小型的网吧或者办公室中，这些地方内部主机不多，出接口可以通过拨号方式获取一个临时公网IP地址。Easy IP可以实现内部主机使用这个临时公网IP地址访问Internet。</p>
<h2 id="Easy-IP的配置："><a href="#Easy-IP的配置：" class="headerlink" title="Easy IP的配置："></a>Easy IP的配置：</h2><p>1.创建ACL：acl 2000</p>
<p>2.允许1.0的数据进行转换：rule 5 permit source 192.168.1.0 0 .0.0.255</p>
<p>3.进入公网出接口</p>
<p>4.应用acl：nat outbound 2000</p>
<p>（相较于napt少了地址池）</p>
<p>验证：</p>
<p><img src="/2023/11/25/nat%E5%AE%9E%E9%AA%8C/easadwaawh215116.png" alt="easadwaawh215116"></p>
<p>源地址为出接口地址172.16.1.1，只是端口不同</p>
]]></content>
      <categories>
        <category>ip实验</category>
      </categories>
      <tags>
        <tag>nat</tag>
      </tags>
  </entry>
  <entry>
    <title>telnet</title>
    <url>/2023/12/02/telnet/</url>
    <content><![CDATA[<h1 id="两种配置方法"><a href="#两种配置方法" class="headerlink" title="两种配置方法"></a>两种配置方法</h1><h2 id="1-仅密码登录验证"><a href="#1-仅密码登录验证" class="headerlink" title="1.仅密码登录验证"></a>1.仅密码登录验证</h2><p>代码如下（示例）：<br><Quidway>system-view —–进入配置模式<br>[Quidway]interface vlan 1 —–进入管理vlan<br>[Quidway-Vlanif1]ip address 192.168.28.49 255.255.255.0 —–配置管理ip地址<br>[Quidway-Vlanif1]quit —–退出<br>[Quidway]telnet server enable —–打开telnet服务 （一般默认开启）<br>[Quidway]user-interface vty 0 4 —–用户指定虚拟用户终端接口<br>[Quidway-ui-vty0-4]authentication-mode password —–配置用户终端接口认证方式 密码验证<br>[Quidway-ui-vty0-4]set authentication password cipher huawei123 —–设置接口验证密码,密码为huawei123<br>[Quidway-ui-vty0-4]user privilege level 15 —–设置用户优先级 （可选）<br>[Quidway-ui-vty0-4]idle-timeout 1 —–设置登陆超时为一分钟 （可选）<br>[Quidway-ui-vty0-4]return —–返回用户视图<br><Quidway>save —–保存</Quidway></Quidway></p>
<h2 id="2-配置AAA登录"><a href="#2-配置AAA登录" class="headerlink" title="2.配置AAA登录"></a>2.配置AAA登录</h2><p>代码如下（示例）：<br><Quidway>system-view —–进入配置模式<br>[Quidway]interface vlan 1 —–进入管理vlan<br>[Quidway-Vlanif1]ip address 192.168.28.49 255.255.255.0 —–配置管理ip地址<br>[Quidway-Vlanif1]quit —–退出<br>[Quidway]telnet server enable —–打开telnet服务 （一般默认开启）<br>[Quidway]user-interface vty 0 4 —–用户指定虚拟用户终端接口<br>[Quidway-ui-vty0-4]authentication-mode aaa —–配置用户终端接口认证方式 aaa验证<br>[Quidway-ui-vty0-4]user privilege level 15 —–设置用户优先级<br>[Quidway-ui-vty0-4]idle-timeout 1 —–设置登陆超时为一分钟<br>[Quidway-ui-vty0-4]quit —–退出<br>[Quidway]aaa —–进入aaa<br>[Quidway-aaa]local-user huawei password cipher huawei123 —–创建用户名huawei 密码huawei123<br>[Quidway-aaa]local-user huawei privilege level 15 —–设置用户优先级<br>[Quidway-aaa]local-user huawei service-type telnet —–授权用户使用telnet<br>[Quidway-ui-vty0-4]return —–返回用户视图<br><Quidway>save —–保存</Quidway></Quidway></p>
<h2 id="user-interface-vty-0-4-详解"><a href="#user-interface-vty-0-4-详解" class="headerlink" title="user-interface vty 0 4 详解"></a>user-interface vty 0 4 详解</h2><p>Quidway]user-interface vty 0 4                    ；进入虚拟终端<br>[S3026-ui-vty0-4]authentication-mode password           ；设置口令模式<br>[S3026-ui-vty0-4]set authentication-mode password simple 222 ；设置口令<br>[S3026-ui-vty0-4]user privilege level 3 </p>
<p>一、第一句的意思是：进入到vty 终端，在华为的交换机里，vty就是人家用telnet远程进入到你交换机的界面，最多有五个，所以说你可以vty 0  vty 1 vty… vty 4交换机最多可以允许五个人同时在线进到交换机里去配置命令的。vty0 4 就是说把这五个界面一起配置了，这五个界面进去的话，都是使用以下的配置。<br>二、用的认证模式是密码认证，可以使用scheme模式来，也可以用password来，用password的话，是要密码的，就是说你telnet的话，要输入密码才能登陆到包交换机里去的。<br>二、设置密码为明文密码，密码是123 ，如果是密文的话，就是cipher<br>四、用户等级为3，也就是最高的，华为的命令级别很多，分为四级，0 1 2 3 ，0是参观级，只能看，1比0要高，可以使用一些命令，2 是可以配置了，3可以备份与删除IOS啦，呵呵，这个命令就是说用这个123密码，进来就是最高级别的，不用换级别。</p>
]]></content>
      <categories>
        <category>ip实验</category>
      </categories>
      <tags>
        <tag>telnet</tag>
        <tag>aaa</tag>
      </tags>
  </entry>
  <entry>
    <title>mpls实验</title>
    <url>/2023/12/05/mpls%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>MPLS（Multiprotocol Label Switching）多协议标签转发复习总结<br>首先我们要先知道MPLS是为何出现的？<br>MPLS是基于传统IP网络（RIP，OSPF等）的缺陷由IETF确定的</p>
<p><strong>顺便先复习一下路由器查路由表 转发的过程：</strong></p>
<p>传统的IP转发中，物理层从交换机的一个端口收到一个报文，上送到数据链路层。数据链路层去掉链路层封装，根据报文的协议域上送给相应的网络层。网络层首先看报文是否是送给本机的，若是，去掉网络层封装，上送给它的上层协议。若不是，则根据报文的目的地址查找路由表，若找到路由，将报文送给相应端口的数据链路层，数据链路层封装后，发送报文。若找不到路由，将报文丢弃。传统的IP转发采用的是逐跳转发，数据报文经过每一台交换机，都要执行上述过程（如图中SWA收到目的地址为10.2.0.1的数据包，SWA会依次查找路由表，根据匹配的路由表项的进行转发，SWB、SWC、SWD都会进行类似的处理），所以速度缓慢。并且所有的交换机需要知道全网的路由或者默认路由。另外，由于传统IP转发是面向无连接的，所以无法提供好的Qos保证。</p>
<p>传统IP网络基于IGP Metric计算最优路径，这是远远不够的，往往在现实网络中还需考虑带宽、链路属性等其他因素；基于IP的流量工程是基于IGP面向目的地址的转发，是hop-by-hop（逐跳）的转发，无法实现根据来源来控制流量转发；另外基于IP的流量工程是面向无连接的，不能实现显式路径（Explicit Routing）。<br>上图中，SWB和SWD之间存在两条路径。传统的IP转发中IGP根据Metric选择最优的路由SWB-SWC-SWD转发所有从Network A和Network B到Network C的IP报文，而SWB-SWG-SWH-SWD链路则闲置，当网络中流量过大，有可能导致最优路径拥塞，但次优路径却空载没有被充分利用。</p>
<p>MPLS的出现<br>从A到走到B有三种方法：<br><strong>1.广播</strong>（如以太网）：直接把数据发给每一个地方<br><strong>2.逐跳寻径</strong>：走到一个地方，问一下路接下来该怎么走（也就是上面说的根据路由协议，查路由表）<br><strong>3.源路由</strong>：提前规划好路线，到哪里怎么走，不常用。</p>
<p>而<strong>MPLS</strong>是第四种走法：<br>跟在“向导”后面走，向导在走过的路上做好标记，你只要沿着标记的指示走就可以了。这也就是“标签交换”</p>
<p>MPLS结合了三层路由技术与二层交换技术，所以可以把它看成“<strong>2.5层</strong>”的<br>其中的MP多协议指的是支持多种网络协议，如ipv4，ipv6，CLNP，IPX等</p>
<p>MPLS是一种标签转发技术，它采用无连接的控制平面和面向连接的数据平面（具体的MPLS架构下面还有介绍），无连接的控制平面实现路由信息的传递和标签的分发，面向连接的数据平面实现报文在建立的标签转发路径上传送。MPLS域内，交换机不需要查看每个报文的目的IP地址，只需要根据封装在IP头外面的标签进行转发即可，这样可以大大提高效率</p>
<p>MPLS转发与IP逐跳转发的关系<br>MPLS是IP的承载层：MPLS转发与IP转发不冲突，它们的关系是如果能够使用MPLS转发，那么IP包会先封装成MPLS数据帧来转发。如果不能MPLS转发，就还是原来的ip逐跳转发。<br><strong>（也就是尽量优先MPLS，因为它会更快）</strong></p>
<p><img src="/2023/12/05/mpls%E5%AE%9E%E9%AA%8C/mnvc7761.png" alt="mnvc7761"></p>
<p>看上面的图，我们需要理解：整个MPLS域（可以进行MPLS转发的区域）是嵌在IP域上的，也就是MPLS域外部是IP域，它本身也运行IP域。</p>
<p><strong>MPLS中一些基本概念，名词</strong><br>标签（Label）：是一个定长的，比较短的，只具有本地意义的标识。<br><strong>FEC（转发等价类）</strong>：一组或一类数据，这组数据分配的标签相同<br><strong>LSP（标签交换通道）</strong>：一个FEC的数据流，在不同的节点被赋予确定的标签,数据转发按照<br>这些标签进行。数据流所走的路径就是LSP。<br><strong>LSR（Label Switching Router</strong>）： LSR是MPLS的网络的核心交换机，它提供标签交<br>换和标签分发功能。<br><strong>LER（Label Switching Edge Router）</strong>：在MPLS的网络边缘，进入到MPLS网络的流量由LER分为不同的FEC，并为这些FEC请求相应的标签。它提供流量分类和标签的映射、标签的移除功能。</p>
<p>从IP域进入MPLS域的时候，LER（标记边缘路由器）要做一个压入（push），出MPLS域的时候做一个弹出（pop），而LSR（标记交换路由器）负责转发。所以LER实际工作量比LSR大很多。LSP（标记交换路径）就是从进入到离开 走的路径。这条路径是在转发报文之前就已经通过各种协议确定并建立的，报文会在特定的LSP上传递。（也可以把LSP看成一个隧道）</p>
<p>标签报文格式：</p>
<p>MPLS Header长度为<strong>32bits</strong>，包括长度为<strong>20bits的标签（Label）</strong>，该标签用于报文转发；长度为3bits的EXP通常用来承载IP报文中的优先级；长度为<strong>1bit的栈底标志S</strong>用来表明是否是最后一个标签（MPLS标签可以多层嵌套）；长度为<strong>8bits的TTL</strong>，作用类似IP头部的TTL，用来防止报文环路等。</p>
<p>事实上MPLS封装有两种方式，上面说的是帧模式，Ethernet和PPP都是帧模式封装；还有一个信元封装模式（ATM采用）。<br>MPLS的 LSP 与标签转发表</p>
<p><strong>MPLS转发过程</strong></p>
<p><img src="/2023/12/05/mpls%E5%AE%9E%E9%AA%8C/mplszfgc813341.png" alt="mplszfgc813341"></p>
<p>1.Push：首先从IP数据包从ip域进入MPLS域，入口LER做 push 操作，分析转发等价类，为数据包“打上标签”，绑定LSP通道；图中A的标签转发表内容大概如下：</p>
<p><img src="/2023/12/05/mpls%E5%AE%9E%E9%AA%8C/a008298.png" alt="a008298"></p>
<p>2.Swap：B，C两个LSR根据标签转发表，用下一跳分配的标签，替换MPLS报文的标签并转发</p>
<p><img src="/2023/12/05/mpls%E5%AE%9E%E9%AA%8C/bc66327448.png" alt="bc66327448"></p>
<p>3.Pop：转发到出口LER D时，进行pop弹出操作，去掉标签</p>
<p>MPLS转发的过程到这里结束。</p>
<p><img src="/2023/12/05/mpls%E5%AE%9E%E9%AA%8C/d4kg2110.png" alt="d4kg2110"></p>
<p><strong>PHP</strong>（倒数第二跳弹出。Penultimate Hop Popping ，和web开发的php可没关系）：上面的过程我们可以发现，C在发给D时，其实带标签的数据已经没有意义，因为下一跳就要弹出标签了，所以完全可以在C就把标签弹出，然后以ip报文形式转发给D。<br>这样可以大大降低最后的出口LER的工作量，是现在MPLS普遍采用的方法。<br>默认情况下，设备支持PHP特性，支持PHP的Egress节点即出口LER 分配给倒数第二跳节点的标签值为3。</p>
<p><strong>MPLS标签转发表与LDP</strong></p>
<p>我们知道，<br>交换机中的MAC地址表是通过逆向学习法产生的；<br>路由器中的路由表是通过路由协议学习或自己配置静态路由产生的。<br>那么MPLS中标签转发表是怎么产生的呢？</p>
<p>答案是也会有一个类似的路由器学习的协议，这个协议叫做LDP（Label Distribution Protocol 标签分发协议），这个也是MPLS技术的核心协议之一。LDP来完成标签的分配控制和保持</p>
<p>从整个MPLS架构看这个协议的位置：</p>
<p><img src="/2023/12/05/mpls%E5%AE%9E%E9%AA%8C/jiegoutu666299.png" alt="jiegoutu666299"></p>
<p>以上是MPLS架构图<br>MPLS包括两个平面：控制平面和数据平面。<br>控制平面负责产生和维护路由信息以及标签信息。数据平面负责普通IP报文的转发以及带MPLS标签报文的转发。<br>控制平面中路由协议模块（Routing Protocol）用来传递路由信息，生成路由信息表；标签分发协议模块（Label Distribution Protocol）用来完成标签信息的交换，建立标签转发路径。<br>数据平面包括IP转发表和标签转发表，当收到普通IP报文时（Incoming IP Packets），如果是普通IP转发，则查找IP路由表转发，如果需要标签转发，则按照标签转发表转发；当收到带有标签的报文时（Incoming Labeled Packets）时，如果需要按照标签转发，根据标签转发表转发，如果需要转发到IP网络，则去掉标签后根据IP转发表转发。</p>
<p>LDP的标签管理与保留方式主要内容有下面三部分</p>
<ol>
<li><strong>标签分配模式</strong></li>
</ol>
<p>DoD：下游按需标记分发<br>DU：下游自主标记分发<br>2. <strong>标签控制模式</strong></p>
<p>有序方式<br>独立方式</p>
<ol start="3">
<li><strong>标签保持模式</strong></li>
</ol>
<p>保守模式<br>自由模式<br>最常用的组合是 <strong>下游自主（DU） + 有序 + 自由</strong></p>
<p>下面来具体介绍什么意思</p>
<p><img src="/2023/12/05/mpls%E5%AE%9E%E9%AA%8C/shangxiayou6291.png" alt="shangxiayou6291"></p>
<p>这里先要理解上游，下游的概念，MPLS入口出为最上游；出口处为最下游。标签的产生可以理解为是下游为上游产生的，下游产生的IN标签作为上游的OUT标签（比如图中R3左边要接收的IN标签为100，那么R2向右的OUT标签就要是100，因为R3只要为100的标签）</p>
<p>然后具体介绍上面的三个部分：<br><strong>Ⅰ.标签的控制模式</strong>（即标签是怎么产生的）：<br>有序（常用）：只有最下游路由器才能产生标签，最下游的上游收到最下游的标签映射消息后，然后才能再往自己的上游发送标签映射关系。<br>独立：中间的路由器也可以直接产生标签</p>
<p><strong>Ⅱ.标签的分发模式：</strong><br>下游按需 ：需要的时候上游再向下游询问标签信息；<br>下游自主：不管有没有问，下游路由器都自主的向上游发送标签映射信息（主动向上汇报）<br><strong>Ⅲ.标签的保留模式</strong>：如果有两条路径，也就会有两个标签，那么路由器保留哪个。<br>保守：只保留路由表中的”最佳路径“，跳数比较少的；<br>自由：保留所有的标签，虽然占用了更多的标签空间，但是收敛会快</p>
<h1 id="基础实验"><a href="#基础实验" class="headerlink" title="基础实验"></a>基础实验</h1><p><img src="/2023/12/05/mpls%E5%AE%9E%E9%AA%8C/tuoputump181224.png" alt="tuoputump181224"></p>
<p><strong>配置步骤：</strong></p>
<p>完成ip和ospf配置：</p>
<p>R1的配置如下： </p>
<p>[R1] interface GigabitEthernet0&#x2F;0&#x2F;0 </p>
<p>[R1-GigabitEthernet0&#x2F;0&#x2F;0] ip address 12.1.1.1 24 </p>
<p>[R1] interface loopback0</p>
<p>[R1-Loopback0] ip address 1.1.1.1 32 </p>
<p>[R1] ospf 1 router-id 1.1.1.1 </p>
<p>[R1-ospf-1] area 0 </p>
<p>[R1-ospf-1-0.0.0.0] network 12.1.1.0 0.0.0.255 </p>
<p>[R1-ospf-1-0.0.0.0] network 1.1.1.1 0.0.0.0 </p>
<p>R2的配置如下： </p>
<p>[R2] interface GigabitEthernet0&#x2F;0&#x2F;0 </p>
<p>[R2-GigabitEthernet0&#x2F;0&#x2F;0] ip address 12.1.1.2 24 </p>
<p>[R2] interface GigabitEthernet0&#x2F;0&#x2F;1 </p>
<p>[R2-GigabitEthernet0&#x2F;0&#x2F;1] ip address 23.1.1.2 24 </p>
<p>[R2] interface loopback0 </p>
<p>[R2-Loopback0] ip address 2.2.2.2 32 </p>
<p>[R2] ospf 1 router-id 2.2.2.2 </p>
<p>[R2-ospf-1] area 0 </p>
<p>[R2-ospf-1-0.0.0.0] network 12.1.1.0 0.0.0.255 </p>
<p>[R2-ospf-1-0.0.0.0] network 23.1.1.0 0.0.0.255 </p>
<p>[R2-ospf-1-0.0.0.0] network 2.2.2.2 0.0.0.0 </p>
<p>R3的配置如下： </p>
<p>[R3] interface GigabitEthernet0&#x2F;0&#x2F;0 </p>
<p>[R3-GigabitEthernet0&#x2F;0&#x2F;0] ip address 23.1.1.3 24 </p>
<p>[R3] interface GigabitEthernet0&#x2F;0&#x2F;1 </p>
<p>[R3-GigabitEthernet0&#x2F;0&#x2F;1] ip address 34.1.1.3 24 </p>
<p>[R3] interface loopback0 </p>
<p>[R3-Loopback0] ip address 3.3.3.3 32 </p>
<p>[R3] ospf 1 router-id 3.3.3.3 </p>
<p>[R3-ospf-1] area 0 </p>
<p>[R3-ospf-1-0.0.0.0] network 23.1.1.0 0.0.0.255 </p>
<p>[R3-ospf-1-0.0.0.0] network 34.1.1.0 0.0.0.255 </p>
<p>[R3-ospf-1-0.0.0.0] network 1.1.1.1 0.0.0.0 </p>
<p>R4的配置如下： </p>
<p>[R4] interface GigabitEthernet0&#x2F;0&#x2F;0</p>
<p>[R4-GigabitEthernet0&#x2F;0&#x2F;0] ip address 34.1.1.4 24 </p>
<p>[R4] interface loopback0 </p>
<p>[R4-Loopback0] ip address 4.4.4.4 32 </p>
<p>[R4] ospf 1 router-id 4.4.4.4 </p>
<p>[R4-ospf-1] area 0 </p>
<p>[R4-ospf-1-0.0.0.0] network 34.1.1.0 0.0.0.255 </p>
<p>[R4-ospf-1-0.0.0.0] network 4.4.4.4 0.0.0.0 </p>
<p><strong>激活mpls并激活ldp</strong></p>
<p>（全局和接口下都需要激活）</p>
<p>R1的配置如下： </p>
<p>[R1] mpls lsr-id 1.1.1.1 </p>
<p>#配置MPLS LSR ID </p>
<p>[R1] mpls </p>
<p>#全局激活MPLS </p>
<p>[R1-mpls] quit </p>
<p>[R1] mpls ldp </p>
<p>#全局激活LDP </p>
<p>[R1-mpls-ldp] quit </p>
<p>[R1] Interface GigabitEthernet 0&#x2F;0&#x2F;0 </p>
<p>[R1-GigabitEthernet0&#x2F;0&#x2F;0] mpls </p>
<p>#在接口上激活MPLS </p>
<p>[R1-GigabitEthernet0&#x2F;0&#x2F;0] mpls ldp </p>
<p>#在接口上激活LDP </p>
<p>R2的配置如下： </p>
<p>[R2] mpls lsr-id 2.2.2.2 </p>
<p>[R2] mpls </p>
<p>[R2-mpls] quit </p>
<p>[R2] mpls ldp </p>
<p>[R2-mpls-ldp] quit </p>
<p>[R2] Interface GigabitEthernet 0&#x2F;0&#x2F;0 </p>
<p>[R2-GigabitEthernet0&#x2F;0&#x2F;0] mpls</p>
<p>[R2-GigabitEthernet0&#x2F;0&#x2F;0] mpls ldp </p>
<p>[R2] Interface GigabitEthernet 0&#x2F;0&#x2F;1 </p>
<p>[R2-GigabitEthernet0&#x2F;0&#x2F;1] mpls </p>
<p>[R2-GigabitEthernet0&#x2F;0&#x2F;1] mpls ldp </p>
<p>R3的配置如下： </p>
<p>[R3] mpls lsr-id 3.3.3.3 </p>
<p>[R3] mpls </p>
<p>[R3-mpls] quit </p>
<p>[R3] mpls ldp </p>
<p>[R3-mpls-ldp] quit </p>
<p>[R3] Interface GigabitEthernet 0&#x2F;0&#x2F;0 </p>
<p>[R3-GigabitEthernet0&#x2F;0&#x2F;0] mpls </p>
<p>[R3-GigabitEthernet0&#x2F;0&#x2F;0] mpls ldp </p>
<p>[R3] Interface GigabitEthernet 0&#x2F;0&#x2F;1 </p>
<p>[R3-GigabitEthernet0&#x2F;0&#x2F;1] mpls </p>
<p>[R3-GigabitEthernet0&#x2F;0&#x2F;1] mpls ldp </p>
<p>R4的配置如下： </p>
<p>[R4] mpls lsr-id 4.4.4.4 </p>
<p>[R4] mpls </p>
<p>[R4-mpls] quit </p>
<p>[R4] mpls ldp </p>
<p>[R4-mpls-ldp] quit </p>
<p>[R4] Interface GigabitEthernet 0&#x2F;0&#x2F;0 </p>
<p>[R4-GigabitEthernet0&#x2F;0&#x2F;0] mpls </p>
<p>[R4-GigabitEthernet0&#x2F;0&#x2F;0] mpls ldp</p>
<p><strong>验证</strong>： </p>
<p><R1>display mpls ldp peer</R1></p>
<p> LDP Peer Information in Public network</p>
<p> A ‘*’ before a peer means the peer is being deleted.</p>
<p> -—————————————————————————–</p>
<p> PeerID         TransportAddress  DiscoverySource</p>
<p> -—————————————————————————–</p>
<p> 2.2.2.2:0        2.2.2.2       GigabitEthernet0&#x2F;0&#x2F;0</p>
<p> -—————————————————————————–</p>
<p> TOTAL: 1 Peer(s) Found.</p>
<p>以上输出的是R1的LDP邻居表，从表中可以看出R1已经发现了一个LDP邻居，那就是R2。</p>
<p><R1>disp mpls ldp session  verbose </R1></p>
<p> LDP Session(s) in Public Network</p>
<p> -—————————————————————————–</p>
<p> Peer LDP ID   : 2.2.2.2:0      Local LDP ID  : 1.1.1.1:0</p>
<p> TCP Connection  : 1.1.1.1 &lt;- 2.2.2.2</p>
<p> Session State  : Operational    Session Role  : Passive</p>
<p> Session FT Flag : Off         MD5 Flag    : Off</p>
<p> Reconnect Timer : —         Recovery Timer : —</p>
<p> Keychain Name  : —</p>
<p> Negotiated Keepalive Hold Timer  : 45 Sec</p>
<p> Configured Keepalive Send Timer  : —</p>
<p> Keepalive Message Sent&#x2F;Rcvd    : 153&#x2F;153 (Message Count)</p>
<p> Label Advertisement Mode      : Downstream Unsolicited</p>
<p> Label Resource Status(Peer&#x2F;Local) : Available&#x2F;Available</p>
<p> Session Age            : 0000:00:38 (DDDD:HH:MM)</p>
<p> Session Deletion Status      : No</p>
<p> Capability:</p>
<p>  Capability-Announcement     : Off</p>
<p>  P2MP Capability         : Off</p>
<p> Outbound&amp;Inbound Policies applied : NULL</p>
<p> Addresses received from peer: (Count: 3)</p>
<p> 2.2.2.2       12.1.1.2       23.1.1.2      </p>
<p> -—————————————————————————–</p>
<p>以上输出的是LDP会话的详细信息，邻居的状态必须为<strong>Operational</strong>才是最终的稳态，另外从TCP连接1.1.1.1 &lt; 2.2.2.2可以验证一点，LDP的会话建立是由传输地址大的一方发起的。</p>
<p><R1>display mpls ldp lsp </R1></p>
<p> LDP LSP Information</p>
<p> -——————————————————————————</p>
<p> DestAddress&#x2F;Mask  In&#x2F;OutLabel   UpstreamPeer   NextHop     OutInterface</p>
<p> -——————————————————————————</p>
<p> 1.1.1.1&#x2F;32     3&#x2F;NULL     2.2.2.2     127.0.0.1    InLoop0</p>
<p>*1.1.1.1&#x2F;32     Liberal&#x2F;1026          DS&#x2F;2.2.2.2</p>
<p> 2.2.2.2&#x2F;32     NULL&#x2F;3     -        12.1.1.2     GE0&#x2F;0&#x2F;0</p>
<p> 2.2.2.2&#x2F;32     1026&#x2F;3     2.2.2.2     12.1.1.2     GE0&#x2F;0&#x2F;0</p>
<p> 3.3.3.3&#x2F;32     NULL&#x2F;1024    -        12.1.1.2     GE0&#x2F;0&#x2F;0</p>
<p> 3.3.3.3&#x2F;32     1024&#x2F;1024    2.2.2.2     12.1.1.2     GE0&#x2F;0&#x2F;0</p>
<p> 4.4.4.4&#x2F;32     NULL&#x2F;1025    -        12.1.1.2     GE0&#x2F;0&#x2F;0</p>
<p> 4.4.4.4&#x2F;32     1025&#x2F;1025    2.2.2.2     12.1.1.2     GE0&#x2F;0&#x2F;0</p>
<p> -——————————————————————————</p>
<p> TOTAL: 7 Normal LSP(s) Found.</p>
<p> TOTAL: 1 Liberal LSP(s) Found.</p>
<p> TOTAL: 0 Frr LSP(s) Found.</p>
<p> A ‘*’ before an LSP means the LSP is not established</p>
<p> A ‘*’ before a Label means the USCB or DSCB is stale</p>
<p> A ‘*’ before a UpstreamPeer means the session is stale</p>
<p> A ‘*’ before a DS means the session is stale</p>
<p> A ‘*’ before a NextHop means the LSP is FRR LSP</p>
<p>以上输出的是R1的LFIB（标签转发信息库），可以看到已经建立好的LSP。 </p>
<p>实际上，当我们再R1、R2、R3、R4上运行OSPF后，全网的路由已经被打通，也就是每台路由器都拥有全网的路由，其中包括互联网段的路由，以及各设备的Loopback路由。随后我们激活各设备的MPLS和LDP，每台设备会基于自己的路由表中的路由前缀进行标签捆绑，并且将为路由前缀（FEC）所捆绑的标签分发给自己的LDP邻居。默认情况下在我司的设备上，仅为&#x2F;32的主机路由分发标签，并且默认水平分割规则并未打开。</p>
<p>现在，来测试一下，从R1去tracert 4.4.4.4： </p>
<p><R1>tracert lsp ip 4.4.4.4 32</R1></p>
<p> LSP Trace Route FEC: IPV4 PREFIX 4.4.4.4&#x2F;32 , press CTRL_C to break.</p>
<p> TTL  Replier       Time   Type    Downstream </p>
<p> 0                 Ingress  12.1.1.2&#x2F;[1025 ]</p>
<p> 1   12.1.1.2      20 ms  Transit  23.1.1.3&#x2F;[1024 ]</p>
<p> 2   23.1.1.3      20 ms  Transit  34.1.1.4&#x2F;[3 ]</p>
<p> 3   4.4.4.4       20 ms  Egress </p>
<p>从tracert的结果我们可以看到数据包行走的路径，以及被压入的标签。</p>
]]></content>
      <categories>
        <category>ip实验</category>
      </categories>
      <tags>
        <tag>mpls</tag>
      </tags>
  </entry>
  <entry>
    <title>vlan间通信</title>
    <url>/2023/11/24/vlan%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h1 id="VLAN间通信"><a href="#VLAN间通信" class="headerlink" title="VLAN间通信"></a>VLAN间通信</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>划分VLAN后，不同VLAN的用户间不能二层互访，这样能起到隔离广播的作用。但实际应用中，不同VLAN的用户又常有互访的需求，此时就需要实现不同VLAN的用户互访，简称VLAN间互访。</p>
<span id="more"></span>

<h2 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h2><p><img src="/2023/11/24/vlan%E9%97%B4%E9%80%9A%E4%BF%A1/vlantx001.png" alt="vlantx001"></p>
<p>详解：R2划入vlan2，R3划入vlan3，与交换机之间采用access口，由于交换机g0&#x2F;0&#x2F;1需要通过多个vlan，所以配成trunk口。R2和R3相当于主机，发送和接受的数据都不带标签，交换机g0&#x2F;0&#x2F;2收到R2发送的数据，打上标签vlan2，然后发出去；交换机g0&#x2F;0&#x2F;1收到数据后，发现vlan的标签允许通过，则数据带着vlan2的标签通过；然后交换机g0&#x2F;0&#x2F;3口转发数据时，发现自己的pvid是vlan3，和vlan2不一样，所以不接受，则vlan2和vlan3不能通信。</p>
<p>在某些场景下，需要特定vlan之间通信</p>
<p>方法一：dot1q接口</p>
<p>在r1上配置两个dot1q接口，g0&#x2F;0&#x2F;1.1和g0&#x2F;0&#x2F;1.2，分别对应vlan2和vlan3，作用就是可以终结vlan标签（剥离），vlan2的标签到r1后，被剥离掉vlan2的标签，然后转发时又被g0&#x2F;0&#x2F;1.2打上vlan3的标签，交换机g0&#x2F;0&#x2F;1通过，到g0&#x2F;0&#x2F;3，access口发现和自己的pvid一样，然后剥离掉标签，转发数据帧给r3.</p>
<p>方法二：vlanif接口：交换机上配置vlanif2和vlanif3，ip地址配成192.168.2.254和192.168.3.254</p>
<p>其实就是相当于两个不同网段的网关，然后实现三层的转发</p>
<h2 id="Access接口"><a href="#Access接口" class="headerlink" title="Access接口"></a>Access接口</h2><p>交换机上常用来连接用户PC、服务器等终端设备的接口。Access接口所连接的这些设备的网卡往往只收发无标记帧。Access接口只能加入一个VLAN。只能允许一个VLAN通过。</p>
<p><strong>转发原则</strong></p>
<p>接收原则：</p>
<p>①收到不带标签的数据帧，打上标签，vlan id&#x3D;端口的PVID</p>
<p>②收到带标签的数据帧，检查数据帧vlan id是否和端口的PVID相同，相同直接接收；不同拒绝接收</p>
<p>发送原则：</p>
<p>①数据帧vlan id和端口PVID 相同，剥离标签发送；</p>
<p>②数据帧vlan id和端口PVID 不同，禁止发送。</p>
<h2 id="Trunk接口"><a href="#Trunk接口" class="headerlink" title="Trunk接口"></a>Trunk接口</h2><p>Trunk接口允许多个VLAN的数据帧通过，这些数据帧通过802.1Q Tag实现区分。Trunk接口常用于交换机之间的互联，也用于连接路由器、防火墙等设备的</p>
<p>子接口</p>
<p><strong>转发原则</strong></p>
<p>接收原则：</p>
<p>①收到不带标签的数据帧，打上标签，vlan id&#x3D;端口的PVID，然后查看该vlanid是否在允许列表中，是–接收，不是–拒绝</p>
<p>②收到带标签的数据帧，查看该vlan id是否在允许列表中，是–接收，不是–拒绝</p>
<p>发送原则：</p>
<p>查看vlan id是否在允许列表中，I:不是–拒绝发送；II：是，查看接口的PVID和vlan id是否相同，相同–剥标签发送；不同–直接发送。</p>
<h2 id="Hybrid接口"><a href="#Hybrid接口" class="headerlink" title="Hybrid接口"></a>Hybrid接口</h2><p>Hybrid接口与Trunk接口类似，也允许多个VLAN的数据帧通过，这些数据帧通过802.1Q Tag实现区分。用户可以灵活指定Hybrid接口在发送某个（或某些）VLAN的数据帧时是否携带Tag</p>
<p><strong>转发原则</strong></p>
<p>接收原则：</p>
<p>①收到不带标签的数据帧，打上标签，vlan id&#x3D;端口的PVID，然后查看该vlanid是否在允许列表中，是–接收，不是–拒绝</p>
<p>②收到带标签的数据帧，查看该vlan id是否在允许列表中，是–接收，不是–拒绝发送原则：查看vlan id是否在允许列表中，I:不是–拒绝发送；II：是，是否带标签发送取决于接口的配置。</p>
<h2 id="PVID"><a href="#PVID" class="headerlink" title="PVID"></a>PVID</h2><p>可以手工修改，默认是1，access口的就是本身的vlan号，trunk可以有一个主vlan和多个副vlan，收到的数据和主vlan相同就剥离转发，收到和主vlan不一样的标签，查表，看看是不是在允许通过的列表，如果有，就带着原来的转发，要是没有，就不让过去啦。</p>
<h2 id="实验配置过程"><a href="#实验配置过程" class="headerlink" title="实验配置过程"></a>实验配置过程</h2><p># R2和R3的IP地址及网关配置</p>
<p><R2> system-view</R2></p>
<p>Enter system view, return user view with Ctrl+Z.</p>
<p>[R2]interface GigabitEthernet 0&#x2F;0&#x2F;1</p>
<p>[R2-GigabitEthernet0&#x2F;0&#x2F;1]ip address 192.168.2.1 24</p>
<p>[R2-GigabitEthernet0&#x2F;0&#x2F;1]quit	</p>
<p>[R2]ip route-static 0.0.0.0 0 192.168.2.254</p>
<p>配置默认路由，相当于给设备配置了网关。</p>
<p><R3>system-view </R3></p>
<p>Enter system view, return user view with Ctrl+Z.</p>
<p>[R3]interface GigabitEthernet 0&#x2F;0&#x2F;1</p>
<p>[R3-GigabitEthernet0&#x2F;0&#x2F;1]ip address 192.168.3.1 24</p>
<p>[R3-GigabitEthernet0&#x2F;0&#x2F;1]quit</p>
<p>[R3]ip route-static 0.0.0.0 0 192.168.3.254</p>
<p># 在S1上对R2和R3进行VLAN划分</p>
<p>[S1]vlan batch 2 3</p>
<p>Info: This operation may take a few seconds. Please wait for a moment…done.</p>
<p>[S1]interface GigabitEthernet 0&#x2F;0&#x2F;2</p>
<p>[S1-GigabitEthernet0&#x2F;0&#x2F;2]port link-type access </p>
<p>[S1-GigabitEthernet0&#x2F;0&#x2F;2]port default vlan 2</p>
<p>[S1-GigabitEthernet0&#x2F;0&#x2F;2]quit</p>
<p>[S1]interface GigabitEthernet 0&#x2F;0&#x2F;3</p>
<p>[S1-GigabitEthernet0&#x2F;0&#x2F;3]port link-type access </p>
<p>[S1-GigabitEthernet0&#x2F;0&#x2F;3]port default vlan 3</p>
<p>步骤 1 通过Dot1q终结子接口实现VLAN间互访 </p>
<p># 配置S1上的Trunk接口</p>
<p>[S1]interface GigabitEthernet 0&#x2F;0&#x2F;1</p>
<p>[S1-GigabitEthernet0&#x2F;0&#x2F;1]port trunk allow-pass vlan 2 3</p>
<p><em>因为VLAN间<strong>互访数据要</strong>由R1来终结VLAN<strong>，</strong>所以S1和R1之间<strong>的链路要允许</strong>VLAN2和VLAN3通过**。</em></p>
<p># 在R1上创建并配置Dot1q终结子接口</p>
<p>[R1]interface GigabitEthernet 0&#x2F;0&#x2F;1.2 </p>
<p>创建并进入子接口视图。2代表子接口的编号，一般建议子接口编号与VLAN ID相同，方便记忆。</p>
<p>[R1-GigabitEthernet0&#x2F;0&#x2F;1.2]dot1q termination vid 2 </p>
<p><strong>dot1q termination vid</strong> <em>vlan-id</em>命令用来配置子接口Dot1q终结的VLAN ID。</p>
<p>以此配置为例：当GigabitEthernet0&#x2F;0&#x2F;1接口收到带有VLAN 2标签的数据之后，会交由2号子接口进行VLAN终结操作并做后续处理。从2号子接口发出的数据也会带上VLAN 2的标签。</p>
<p>[R1-GigabitEthernet0&#x2F;0&#x2F;1.2]arp broadcast enable </p>
<p>终结子接口不能转发广播报文，在收到广播报文后它们直接把该报文丢弃。为了允许终结子接口能转发广播报文，可以通过在子接口上执行命令<strong>arp broadcast enable</strong>使能终结子接口的ARP广播功能。部分设备默认使能该功能，此命令的配置根据设备而定。</p>
<p>[R1-GigabitEthernet0&#x2F;0&#x2F;1.2]ip address 192.168.2.254 24 </p>
<p>[R1-GigabitEthernet0&#x2F;0&#x2F;1.2]quit</p>
<p>[R1]interface GigabitEthernet 0&#x2F;0&#x2F;1.3</p>
<p>[R1-GigabitEthernet0&#x2F;0&#x2F;1.3]dot1q termination vid 3</p>
<p>[R1-GigabitEthernet0&#x2F;0&#x2F;1.3]arp broadcast enable</p>
<p>[R1-GigabitEthernet0&#x2F;0&#x2F;1.3]ip address 192.168.3.254 24</p>
<p>[R1-GigabitEthernet0&#x2F;0&#x2F;1.3]quit</p>
<p># 检测VLAN间互访联通性 </p>
<p><R2>ping 192.168.3.1</R2></p>
<p> PING 192.168.3.1: 56  data bytes, press CTRL_C to break</p>
<p>  Reply from 192.168.3.1: bytes&#x3D;56 Sequence&#x3D;1 ttl&#x3D;254 time&#x3D;60 ms</p>
<p>  Reply from 192.168.3.1: bytes&#x3D;56 Sequence&#x3D;2 ttl&#x3D;254 time&#x3D;40 ms</p>
<p>  Reply from 192.168.3.1: bytes&#x3D;56 Sequence&#x3D;3 ttl&#x3D;254 time&#x3D;110 ms</p>
<p>  Reply from 192.168.3.1: bytes&#x3D;56 Sequence&#x3D;4 ttl&#x3D;254 time&#x3D;70 ms</p>
<p>  Reply from 192.168.3.1: bytes&#x3D;56 Sequence&#x3D;5 ttl&#x3D;254 time&#x3D;100 ms</p>
<p> — 192.168.3.1 ping statistics —</p>
<p>  5 packet(s) transmitted</p>
<p>  5 packet(s) received</p>
<p>  0.00% packet loss</p>
<p>  round-trip min&#x2F;avg&#x2F;max &#x3D; 40&#x2F;76&#x2F;110 ms</p>
<p><R2>tracert 192.168.3.1 </R2></p>
<p> traceroute to  192.168.3.1(192.168.3.1), max hops: 30 ,packet length: 40,press CTRL_C to break </p>
<p> 1 192.168.2.254 30 ms  50 ms  50 ms </p>
<p> 2 192.168.3.1 70 ms  60 ms  60 ms </p>
<p>此时VLAN2和VLAN3之间已经可以正常的互访。</p>
<p>步骤 2 通过VLANIF接口实现VLAN间互访</p>
<p># 清除上一步配置</p>
<p>[S1]interface GigabitEthernet 0&#x2F;0&#x2F;1</p>
<p>[S1-GigabitEthernet0&#x2F;0&#x2F;1]undo port trunk allow-pass vlan 2 3</p>
<p>[S1-GigabitEthernet0&#x2F;0&#x2F;1]undo port link-type</p>
<p>[R1]undo interface GigabitEthernet 0&#x2F;0&#x2F;1.2 </p>
<p>[R1]undo interface GigabitEthernet 0&#x2F;0&#x2F;1.3</p>
<p># 在S1上创建相应的VLANIF接口 </p>
<p>[S1]interface Vlanif 2</p>
<p><strong>interface vlanif</strong> <em>vlan-id</em>命令用来创建VLANIF接口并进入VLANIF接口视图。只有先通过命令创建VLAN后，才能执行interface vlanif命令创建VLANIF接口。</p>
<p>[S1-Vlanif2]ip address 192.168.2.254 24</p>
<p>[S1-Vlanif2]quit</p>
<p>[S1]interface Vlanif 3</p>
<p>[S1-Vlanif3]ip address 192.168.3.254 24 </p>
<p>[S1-Vlanif3]quit</p>
<p># 检测VLAN间互访联通性</p>
<p><R2>ping 192.168.3.1 </R2></p>
<p> PING 192.168.3.1: 56  data bytes, press CTRL_C to break</p>
<p>  Reply from 192.168.3.1: bytes&#x3D;56 Sequence&#x3D;1 ttl&#x3D;254 time&#x3D;100 ms</p>
<p>  Reply from 192.168.3.1: bytes&#x3D;56 Sequence&#x3D;2 ttl&#x3D;254 time&#x3D;50 ms</p>
<p>  Reply from 192.168.3.1: bytes&#x3D;56 Sequence&#x3D;3 ttl&#x3D;254 time&#x3D;50 ms</p>
<p>  Reply from 192.168.3.1: bytes&#x3D;56 Sequence&#x3D;4 ttl&#x3D;254 time&#x3D;60 ms</p>
<p>  Reply from 192.168.3.1: bytes&#x3D;56 Sequence&#x3D;5 ttl&#x3D;254 time&#x3D;70 ms</p>
<p> — 192.168.3.1 ping statistics —</p>
<p>  5 packet(s) transmitted</p>
<p>  5 packet(s) received</p>
<p>  0.00% packet loss</p>
<p>  round-trip min&#x2F;avg&#x2F;max &#x3D; 50&#x2F;66&#x2F;100 ms</p>
<p><R2>tracert 192.168.3.1 </R2></p>
<p> traceroute to  192.168.3.1(192.168.3.1), max hops: 30 ,packet length: 40,press CTRL_C to break </p>
<p> 1 192.168.2.254 40 ms  30 ms  20 ms </p>
<p> 2 192.168.3.1 40 ms  30 ms  40 ms</p>
<p>此时VLAN2和VLAN3之间已经可以正常的互访。</p>
]]></content>
      <categories>
        <category>ip实验</category>
      </categories>
      <tags>
        <tag>vlan间通信</tag>
        <tag>dot1q</tag>
        <tag>vlanif</tag>
      </tags>
  </entry>
  <entry>
    <title>路由策略</title>
    <url>/2023/11/26/%E8%B7%AF%E7%94%B1%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<p><img src="/2023/11/26/%E8%B7%AF%E7%94%B1%E7%AD%96%E7%95%A5/luyouceltuopu126203917.png" alt="luyouceltuopu126203917"></p>
<p>设备互联方式、互联地址如图所示，所有设备均创建Loopback0，其IP地址为10.0.x.x&#x2F;32，其中x为设备编号，R1、R2、R3在互联接口、Loopback0接口上激活OSPF。</p>
<p>R3、R4属于IS-IS Area 49.0001，两者都是Level-1路由器，R3、R4的系统ID采用0000.0000.000x格式，其中x为设备编号。</p>
<span id="more"></span>

<p>R1上存在三个业务网段A、B、C（使用Loopback1、2、3接口路由模拟），在R1上将直连路由引入到OSPF，但是OSPF域内的路由器上不需要C业务的路由，为此在R1上引入直连路由时通过Route-Policy过滤引入的路由。</p>
<p>R2上不需要A业务网段的路由，但是R3上需要A、B业务网段的路由，为此在R2上配置Filter-Policy对OSPF接收的路由进行过滤。</p>
<p>IS-IS域内的路由器需要访问A业务，因此需要在R3上执行路由重分发，将OSPF路由引入到IS-IS，但是IS-IS域内的路由器不需要访问B业务，为此在R1上引入直连路由时为A、B业务网段路由打上不同的路由标记，R3上执行重分发时根据路由标记过滤B业务网段路由。</p>
<h1 id="任务思路"><a href="#任务思路" class="headerlink" title="任务思路"></a>任务思路</h1><ol>
<li>设备基础IP地址配置。</li>
<li>配置R1、R2、R3之间的OSPF，在互联接口、Loopback0接口上激活OSPF。在R3、R4之间配置IS-IS。</li>
<li>在R1上将直连路由引入到OSPF中，同时配置路由策略不引入C业务网段的路由，将A、B业务网段路由分别打上路由标记10、20。</li>
<li>在R2上配置Filter-Policy对接收的OSPF路由进行过滤，只接收B业务网段的路由。</li>
<li>在R3上将OSPF路由引入到IS-IS中，通过Route-Policy匹配路由标记，只引入A业务网段的OSPF外部路由。</li>
</ol>
<h1 id="1-配置ip"><a href="#1-配置ip" class="headerlink" title="1.配置ip"></a>1.配置ip</h1><p>#配置R1的GE0&#x2F;0&#x2F;2、Loopback0接口IP地址</p>
<p>[R1]interface GigabitEthernet0&#x2F;0&#x2F;2</p>
<p>[R1-GigabitEthernet0&#x2F;0&#x2F;2] ip address 10.0.12.1 255.255.255.0</p>
<p>[R1-GigabitEthernet0&#x2F;0&#x2F;2] quit</p>
<p>[R1]interface LoopBack0</p>
<p>[R1-LoopBack0] ip address 10.0.1.1 255.255.255.255</p>
<p>[R1-LoopBack0] quit</p>
<p>#在R1上创建多个环回口，用于模拟业务网段A、B、C</p>
<p>[R1]interface LoopBack1</p>
<p>[R1-LoopBack1] ip address 172.16.1.1 255.255.255.0</p>
<p>[R1-LoopBack1] quit</p>
<p>[R1]interface LoopBack2</p>
<p>[R1-LoopBack2] ip address 172.16.2.1 255.255.255.0</p>
<p>[R1-LoopBack2] quit</p>
<p>[R1]interface LoopBack3</p>
<p>[R1-LoopBack3] ip address 172.16.3.1 255.255.255.0</p>
<p>[R1-LoopBack3] quit</p>
<p>#配置R2的GE0&#x2F;0&#x2F;2、GE0&#x2F;0&#x2F;3、Loopback0接口IP地址</p>
<p>[R2]interface LoopBack0</p>
<p>[R2-LoopBack0] ip address 10.0.2.2 255.255.255.255</p>
<p>[R2-LoopBack0] quit</p>
<p>[R2]interface GigabitEthernet0&#x2F;0&#x2F;2</p>
<p>[R2-GigabitEthernet0&#x2F;0&#x2F;2] ip address 10.0.23.2 255.255.255.0</p>
<p>[R2-GigabitEthernet0&#x2F;0&#x2F;2] quit</p>
<p>[R2]interface GigabitEthernet0&#x2F;0&#x2F;3</p>
<p>[R2-GigabitEthernet0&#x2F;0&#x2F;3] ip address 10.0.12.2 255.255.255.0</p>
<p>[R2-GigabitEthernet0&#x2F;0&#x2F;3] quit</p>
<p>#配置R3的GE0&#x2F;0&#x2F;2、GE0&#x2F;0&#x2F;3、Loopback0接口IP地址</p>
<p>[R3]interface LoopBack0</p>
<p>[R3-LoopBack0] ip address 10.0.3.3 255.255.255.255</p>
<p>[R3-LoopBack0] quit</p>
<p>[R3]interface GigabitEthernet0&#x2F;0&#x2F;2</p>
<p>[R3-GigabitEthernet0&#x2F;0&#x2F;2] ip address 10.0.34.3 255.255.255.0</p>
<p>[R3-GigabitEthernet0&#x2F;0&#x2F;2] quit</p>
<p>[R3]interface GigabitEthernet0&#x2F;0&#x2F;3</p>
<p>[R3-GigabitEthernet0&#x2F;0&#x2F;3] ip address 10.0.23.3 255.255.255.0</p>
<p>[R3-GigabitEthernet0&#x2F;0&#x2F;3] quit</p>
<p>#配置R4的GE0&#x2F;0&#x2F;3、Loopback0接口IP地址</p>
<p>[R4]interface GigabitEthernet0&#x2F;0&#x2F;3</p>
<p>[R4-GigabitEthernet0&#x2F;0&#x2F;3] ip address 10.0.34.4 255.255.255.0</p>
<p>[R4-GigabitEthernet0&#x2F;0&#x2F;3] quit</p>
<p>[R4]interface LoopBack0</p>
<p>[R4-LoopBack0] ip address 10.0.4.4 255.255.255.255</p>
<p>[R4-LoopBack0] quit</p>
<p>#在R2、R4上检查IP地址连通性</p>
<h1 id="2-配置ospf和isis"><a href="#2-配置ospf和isis" class="headerlink" title="2.配置ospf和isis"></a>2.配置ospf和isis</h1><p>#配置R1</p>
<p>[R1]ospf 1 router-id 10.0.1.1</p>
<p>[R1-ospf-1] area 0</p>
<p>[R1-ospf-1-area-0.0.0.0] network 10.0.1.1 0.0.0.0</p>
<p>[R1-ospf-1-area-0.0.0.0] network 10.0.12.1 0.0.0.0</p>
<p>[R1-ospf-1-area-0.0.0.0] quit</p>
<p>[R1-ospf-1] quit</p>
<p>#配置R2</p>
<p>[R2]ospf 1 router-id 10.0.2.2</p>
<p>[R2-ospf-1] area 0.0.0.0</p>
<p>[R2-ospf-1-area-0.0.0.0] network 10.0.2.2 0.0.0.0</p>
<p>[R2-ospf-1-area-0.0.0.0] network 10.0.12.2 0.0.0.0</p>
<p>[R2-ospf-1-area-0.0.0.0] network 10.0.23.2 0.0.0.0</p>
<p>[R2-ospf-1-area-0.0.0.0] quit</p>
<p>[R2-ospf-1] quit</p>
<p>#配置R3</p>
<p>[R3]ospf 1 router-id 10.0.3.3</p>
<p>[R3-ospf-1] area 0.0.0.0</p>
<p>[R3-ospf-1-area-0.0.0.0] network 10.0.3.3 0.0.0.0</p>
<p>[R3-ospf-1-area-0.0.0.0] network 10.0.23.3 0.0.0.0</p>
<p>[R3-ospf-1-area-0.0.0.0] quit</p>
<p>[R3-ospf-1] quit</p>
<p>#在R2上检查OSPF邻居的概要信息</p>
<p>R3、R4上配置IS-IS，区域为49.0001，系统ID采用0000.0000.000x格式（x为设备编号），两台设备都为Level-1路由器，在互联接口、R4的Loopback0接口上激活IS-IS。</p>
<p>#配置R3</p>
<p>[R3]isis 1</p>
<p>[R3-isis-1] is-level level-1</p>
<p>[R3-isis-1] network-entity 49.0001.0000.0000.0003.00</p>
<p>[R3-isis-1] quit</p>
<p>[R3]interface GigabitEthernet0&#x2F;0&#x2F;2</p>
<p>[R3-GigabitEthernet0&#x2F;0&#x2F;2] isis enable 1</p>
<p>[R3-GigabitEthernet0&#x2F;0&#x2F;2] quit</p>
<p>#配置R4</p>
<p>[R4]isis 1</p>
<p>[R4-isis-1] is-level level-1</p>
<p>[R4-isis-1] network-entity 49.0001.0000.0000.0004.00</p>
<p>[R4-isis-1] quit</p>
<p>[R4]interface GigabitEthernet0&#x2F;0&#x2F;3</p>
<p>[R4-GigabitEthernet0&#x2F;0&#x2F;3] isis enable 1</p>
<p>[R4-GigabitEthernet0&#x2F;0&#x2F;3] quit</p>
<p>[R4]interface LoopBack 0</p>
<p>[R4-LoopBack0] isis enable 1</p>
<p>[R4-LoopBack0] quit</p>
<p>#在R3上检查IS-IS邻居状态</p>
<h1 id="3-在R1上引入直连路由"><a href="#3-在R1上引入直连路由" class="headerlink" title="3.在R1上引入直连路由"></a>3.在R1上引入直连路由</h1><p>在R1上将直连路由引入到OSPF中，同时配置路由策略过滤C业务网段，将A、B业务网段路由分别打上路由标记10、20。</p>
<p>#创建IP前缀列表1，匹配Loopback1接口路由（A业务网段）</p>
<p>[R1]ip ip-prefix 1 index 10 permit 172.16.1.0 24 greater-equal 24 less-equal 24</p>
<p>#创建IP前缀列表2，匹配Loopback2接口路由（B业务网段）</p>
<p>[R1]ip ip-prefix 2 index 10 permit 172.16.2.0 24 greater-equal 24 less-equal 24</p>
<p>#创建Route-Policy hcip，并创建节点10、20，分别调用IP前缀列表1、2，打上路由标记</p>
<p>[R1]route-policy hcip permit node 10</p>
<p>[R1-route-policy] if-match ip-prefix 1</p>
<p>[R1-route-policy] apply tag 10</p>
<p>[R1-route-policy] quit</p>
<p>[R1]route-policy hcip permit node 20</p>
<p>[R1-route-policy] if-match ip-prefix 2</p>
<p>[R1-route-policy] apply tag 20 </p>
<p>[R1-route-policy] quit</p>
<p>#在R1的OSPF中引入直连路由，调用Route-Policy hcip</p>
<p>[R1]ospf 1</p>
<p>[R1-ospf-1] import-route direct route-policy hcip</p>
<p>r1上查看ospf lsdb，Loopback1、2接口路由已经被成功引入OSPF中。</p>
<p>#在R1上查看OSPF LSDB中AS-external LSA 172.16.1.0的相关信息</p>
<p>[R1]display ospf lsdb ase 172.16.1.0 </p>
<p>​	 OSPF Process 1 with Router ID 10.0.1.1</p>
<p>​		 Link State Database</p>
<p> Type    : External</p>
<p> Ls id   : 172.16.1.0</p>
<p> Adv rtr  : 10.0.1.1  </p>
<p> Ls age   : 165 </p>
<p> Len    : 36 </p>
<p> Options  :  E  </p>
<p> seq#    : 80000001 </p>
<p> chksum   : 0xa954</p>
<p> Net mask  : 255.255.255.0 </p>
<p> TOS 0  Metric: 1 </p>
<p> E type   : 2</p>
<p> Forwarding Address : 0.0.0.0 </p>
<p> Tag    : 10 </p>
<p> Priority  : Low</p>
<p>外部路由172.16.1.0&#x2F;24已经被打上Tag 10。</p>
<p>#在R1上查看OSPF LSDB中AS-external LSA 172.16.2.0的相关信息</p>
<p>[R1]display ospf lsdb ase 172.16.2.0</p>
<p>​	 OSPF Process 1 with Router ID 10.0.1.1</p>
<p>​		 Link State Database</p>
<p> Type    : External</p>
<p> Ls id   : 172.16.2.0</p>
<p> Adv rtr  : 10.0.1.1  </p>
<p> Ls age   : 355 </p>
<p> Len    : 36 </p>
<p> Options  :  E  </p>
<p> seq#    : 80000001 </p>
<p> chksum   : 0x539f</p>
<p> Net mask  : 255.255.255.0 </p>
<p> TOS 0  Metric: 1 </p>
<p> E type   : 2</p>
<p> Forwarding Address : 0.0.0.0 </p>
<p> Tag    : 20 </p>
<p> Priority  : Low</p>
<p>外部路由172.16.2.0&#x2F;24已经被打上Tag 20。</p>
<h1 id="4-在R2上配置过滤策略"><a href="#4-在R2上配置过滤策略" class="headerlink" title="4.在R2上配置过滤策略"></a>4.在R2上配置过滤策略</h1><p>在R2上配置Filter-Policy对接收的OSPF路由进行过滤，只接收B业务网段的路由。</p>
<p>#查看配置Filter-Policy前的OSPF路由表</p>
<p><R2>display ospf routing</R2></p>
<p>#查看配置Filter-Policy前的IP路由表中的OSPF路由</p>
<p><R2>display ip routing-table protocol ospf	</R2></p>
<p>在OSPF路由表以及IP路由表中<strong>都可以看到</strong>OSPF外部路由172.16.1.0&#x2F;24、172.16.2.0&#x2F;24。</p>
<p>#配置基础ACL </p>
<p>[R2]acl number 2000</p>
<p>[R2-acl-basic-2000] rule 5 deny source 172.16.1.0 0.0.0.255</p>
<p>[R2-acl-basic-2000] rule 10 permit</p>
<p>#在OSPF中部署入方向的Filter-Policy，调用ACL 2000</p>
<p>[R2]ospf 1</p>
<p>[R2-ospf-1] filter-policy 2000 import</p>
<p>#查看配置Filter-Policy后的OSPF路由表</p>
<p>dis ospf routing</p>
<p>发现两条外部路由都还存在</p>
<p>#查看配置Filter-Policy后的IP路由表中的OSPF路由</p>
<p><R2>display ip routing-table protocol ospf	</R2></p>
<p>在IP路由表中路由172.16.2.0&#x2F;24已经不存在，但是在OSPF路由表中依旧存在。这验证了对于OSPF，Filter-Policy只是限制路由加入IP路由表，不影响本地的LSDB以及LSA的传递。</p>
<p>#在R3上查看IP路由表中的OSPF路由</p>
<p><R3>display ip routing-table protocol ospf </R3></p>
<p>R3的IP路由表中OSPF外部路由172.16.1.0&#x2F;24、172.16.2.0&#x2F;24依旧存在。</p>
<h1 id="5-在R3上将OSPF路由引入到IS-IS"><a href="#5-在R3上将OSPF路由引入到IS-IS" class="headerlink" title="5.在R3上将OSPF路由引入到IS-IS"></a>5.在R3上将OSPF路由引入到IS-IS</h1><p>在R3上将OSPF路由引入到IS-IS中，通过Route-Policy匹配路由标记，只引入A业务网段的OSPF外部路由。</p>
<p>#创建Route-Policy hcip</p>
<p>[R3]route-policy hcip permit node 10</p>
<p>[R3-route-policy] if-match tag 10</p>
<p>[R3-route-policy] quit</p>
<p>#在IS-IS中引入OSPF路由，调用Route-Policy hcip只引入A业务网段的OSPF外部路由</p>
<p>[R3]isis 1</p>
<p>[R3-isis-1] import-route ospf 1 <strong>level-1</strong> route-policy hcip</p>
<p>（注意指定level）</p>
<p>#查看R3的IS-IS路由表</p>
<p><R3>display isis route </R3></p>
<p>Level-1的路由重分发表中只有172.16.1.0&#x2F;24。</p>
]]></content>
      <categories>
        <category>ip实验</category>
      </categories>
      <tags>
        <tag>路由策略</tag>
      </tags>
  </entry>
  <entry>
    <title>链路聚合</title>
    <url>/2023/12/07/%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88/</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="什么是链路聚合"><a href="#什么是链路聚合" class="headerlink" title="什么是链路聚合"></a>什么是链路聚合</h2><p>在现网中，设备间如果通过一条链路连接，<strong>如果这条链路故障了，那么设备两端的终端就不能够通信了</strong>。有什么办法可以解决该问题呢？答案是——<strong>链路聚合</strong>。</p>
<p><strong>从端口的角度定义：</strong></p>
<p><strong>链路聚合（Link Aggregation）</strong>是指将<strong>多个物理端口</strong>汇聚在一起，形成一个<strong>逻辑端口</strong>，以实现出&#x2F;入流量吞吐量在各<strong>成员端口</strong>的负荷分担，交换机根据用户配置的端口负载分担方式决定数据包从哪个成员端口发送到对端的交换机。</p>
<p><strong>从链路的角度定义：</strong></p>
<p>链路聚合（Link Aggregation）是把两台设备之间的<strong>多条物理链路聚</strong>合在一起，当做一条<strong>逻辑链路</strong>来使用。这两台设备可以是一对路由器，一对交换机，或者是一台路由器和一台交换机。一条聚合链路可以包含多条成员链路，默认最多为<strong>8</strong>条。</p>
<h2 id="链路聚合的作用"><a href="#链路聚合的作用" class="headerlink" title="链路聚合的作用"></a>链路聚合的作用</h2><ul>
<li>链路聚合能够<strong>提高链路带宽</strong>。理论上，通过聚合几条链路，一个聚合口的带宽可以扩展为所有成员口带宽的总和，这样就有效地增加了逻辑链路的带宽。</li>
<li>链路聚合<strong>为网络提供了高可靠性</strong>。配置了链路聚合之后，如果一个成员接口发生故障，该成员口的物理链路会把流量切换到另一条成员链路上。</li>
<li>链路聚合<strong>在一个聚合口上实现负载均衡。</strong>一个聚合口可以把流量分散到多个不同的成员口上，通过成员链路把流量发送到同一个目的地，将网络产生拥塞的可能性降到最低。</li>
</ul>
<h2 id="三-链路聚合的工作原理："><a href="#三-链路聚合的工作原理：" class="headerlink" title="三. 链路聚合的工作原理："></a><strong>三. 链路聚合的工作原理：</strong></h2><p><strong>应用场景：</strong></p>
<p>链路聚合一般部署在核心结点，以便提升整个网络的数据吞吐量。</p>
<p>链路聚合能够提高链路带宽，增强网络可靠、可用性，支持负载分担。</p>
<p><strong>链路聚合模式:</strong></p>
<p>链路聚合包含两种模式：<strong>手动负载均衡模式</strong>和<strong>静态LACP（Link Aggregation Control Protocol）模式。</strong></p>
<ol>
<li><strong>手工负载分担模式：</strong></li>
</ol>
<ul>
<li>手工负载分担模式下，Eth-Trunk的建立、<strong>成员接口</strong>的加入由<strong>手工配置</strong>，没有链路聚合控制协议的参与。</li>
<li>该模式下所有<strong>活动链路</strong>都参与数据的转发，平均分担流量，因此称为<strong>负载分担模式</strong>。如果某条活动链路故障，链路聚合组自动在剩余的活动链路中平均分担流量。</li>
</ul>
<p><strong>使用场景：</strong></p>
<p>当需要在两个直连设备间提供<strong>一个较大的链路带宽而设备又不支持LACP协议</strong>时，可以使用手工负载分担模式。</p>
<p><strong>2. 静态LACP模式：</strong></p>
<ul>
<li>在静态LACP模式中，链路两端的设备相互发送<strong>LACP报文，协商聚合参数</strong>。协商完成后，两台设备确定活动接口和非活动接口。</li>
<li>在静态LACP模式中，需要手动创建一个Eth-Trunk口，并添加成员口。</li>
<li>静态LACP模式也叫<strong>M:N模式</strong>。M代表<strong>活动成员链路</strong>，用于在负载均衡模式中转发数据。N代表<strong>非活动链路</strong>，用于冗余备份。</li>
<li>如果一条活动链路发生故障，该链路传输的数据被切换到一条优先级最高的备份链路上，这条备份链路转变为活动状态。</li>
</ul>
<p><strong>两种链路聚合模式的主要区别：</strong></p>
<ul>
<li>在<strong>静态LACP模式中</strong>，一些链路充当备份链路。</li>
<li>在<strong>手动负载均衡模式</strong>中，所有的成员口都处于转发状态。</li>
</ul>
<table>
<thead>
<tr>
<th>维度</th>
<th>手工模式</th>
<th>LACP模式</th>
</tr>
</thead>
<tbody><tr>
<td>Eth-Trunk的建立方式</td>
<td>Eth-Trunk接口的创建、成员接口的加入由手工配置，没有链路聚合控制协议的参与。</td>
<td>Eth-Trunk接口的创建、成员接口的加入由手工配置，LACP协议参与链路动态调整，负责链路状态维护。在聚合条件发生变化时，自动调整或解散链路聚合。</td>
</tr>
<tr>
<td>设备是否需要支持LACP协议</td>
<td>不需要</td>
<td>需要</td>
</tr>
<tr>
<td>数据转发</td>
<td>正常情况下，所有链路都是活动链路。所有活动链路均参与数据转发。如果某条活动链路故障，链路聚合组自动在剩余的活动链路中分担流量。</td>
<td>正常情况下，部分链路是活动链路。所有活动链路均参与数据转发。如果某条活动链路故障，链路聚合组自动在非活动链路中选择一条链路作为活动链路，参与数据转发的链路数目不变。</td>
</tr>
<tr>
<td>检测故障</td>
<td>只能检测到同一聚合组内的成员链路有断路等故障，无法检测到链路断连、错连等故障。</td>
<td>不仅能够检测到同一聚合组内的成员链路有断路等故障，还可以检测到链路故障、链路错连等故障。</td>
</tr>
</tbody></table>
<p><strong>数据流控制:</strong></p>
<p>Eth-trunk链路两端相连的物理接口的数量、速率、双工方式、流控方式必须一致。</p>
<h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>0-65535 </p>
<p>默认32768</p>
<p>小的优先</p>
<p>优先级一样，看mac，mac小的优先</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p><img src="/2023/12/07/%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88/juhetuopu31207160429.png" alt="juhetuopu31207160429"></p>
<h2 id="配置手工链路聚合"><a href="#配置手工链路聚合" class="headerlink" title="配置手工链路聚合"></a>配置手工链路聚合</h2><p># 创建Eth-Trunk接口</p>
<p>[S1]interface Eth-Trunk 1 </p>
<p><strong>interface eth-trunk</strong>命令用来进入已经存在的Eth-Trunk接口，或创建并进入Eth-Trunk接口。数字“1”代表接口编号，编号范围根据设备情况有所不同。</p>
<p>[S2]interface Eth-Trunk 1</p>
<p># 设置Eth-Trunk接口的聚合模式 </p>
<p>[S1-Eth-Trunk1]mode manual load-balance</p>
<p><strong>mode</strong>命令用来配置Eth-Trunk的工作模式，有LACP模式和手工负载分担模式（手工模式）两种，缺省情况下，Eth-Trunk的工作模式为手工负载分担模式。此处S1上的模式配置仅为示范目的，实际操作时不需要。</p>
<p># 将成员接口加入聚合组</p>
<p>[S1]interface GigabitEthernet 0&#x2F;0&#x2F;10 </p>
<p>[S1-GigabitEthernet0&#x2F;0&#x2F;10]eth-trunk 1 </p>
<p>Info: This operation may take a few seconds. Please wait for a moment…done.</p>
<p>[S1-GigabitEthernet0&#x2F;0&#x2F;10]quit</p>
<p>[S1]interface GigabitEthernet 0&#x2F;0&#x2F;11</p>
<p>[S1-GigabitEthernet0&#x2F;0&#x2F;11]eth-trunk 1</p>
<p>Info: This operation may take a few seconds. Please wait for a moment…done.</p>
<p>[S1-GigabitEthernet0&#x2F;0&#x2F;11]quit</p>
<p>[S1]interface GigabitEthernet 0&#x2F;0&#x2F;12</p>
<p>[S1-GigabitEthernet0&#x2F;0&#x2F;12]eth-trunk 1</p>
<p>Info: This operation may take a few seconds. Please wait for a moment…done.</p>
<p>[S1-GigabitEthernet0&#x2F;0&#x2F;12]quit</p>
<p>可进入到成员接口的接口视图下，逐一添加到Eth-Trunk接口。也可以在Eth-Trunk接口视图下通过<strong>trunkport</strong>命令批量添加接口。</p>
<p>[S2]interface Eth-Trunk 1</p>
<p>[S2-Eth-Trunk1]trunkport GigabitEthernet 0&#x2F;0&#x2F;10 to 0&#x2F;0&#x2F;12 </p>
<p>Info: This operation may take a few seconds. Please wait for a moment…done.</p>
<p>将成员接口加入Eth-Trunk时，需要注意以下问题：</p>
<p>• 每个Eth-Trunk接口下最多可以包含8个成员接口。</p>
<p>• Eth-Trunk接口不能嵌套，即Eth-Trunk接口的成员接口不能是Eth-Trunk接口。</p>
<p>• 一个以太网接口只能加入到一个Eth-Trunk接口，如果需要加入其它Eth-Trunk接口，必须先退出原来的Eth-Trunk接口。</p>
<p>• 如果本地设备使用了Eth-Trunk，与成员接口直连的对端接口也必须捆绑为Eth-Trunk接口，两端才能正常通信。</p>
<p>Eth-Trunk链路两端相连的物理接口的数量、速率、双工方式等必须一致。</p>
<p>#查看Eth-Trunk接口状态</p>
<p>dis eth-trunk 1</p>
<h2 id="配置LACP模式"><a href="#配置LACP模式" class="headerlink" title="配置LACP模式"></a>配置LACP模式</h2><p># 删除现有Eth-Trunk接口下的成员接口</p>
<p>[S1]interface Eth-Trunk 1</p>
<p>[S1-Eth-Trunk1]undo trunkport GigabitEthernet 0&#x2F;0&#x2F;10 to 0&#x2F;0&#x2F;12</p>
<p>[S2]interface Eth-Trunk 1</p>
<p>[S2-Eth-Trunk1]undo trunkport GigabitEthernet 0&#x2F;0&#x2F;10 to 0&#x2F;0&#x2F;12</p>
<p><strong>在修改Eth-Trunk接口的聚合模式之前，需要确保Eth-Trunk中没有任何成员接口。</strong></p>
<p># 修改聚合模式</p>
<p>[S1]interface Eth-Trunk 1</p>
<p>[S1-Eth-Trunk1]mode lacp</p>
<p><strong>mode</strong> <strong>lacp</strong> 指定Eth-Trunk工作模式为LACP模式。</p>
<p>注：部分版本的设备命令为 mode lacp-static</p>
<p>[S2]interface Eth-Trunk 1</p>
<p>[S2-Eth-Trunk1]mode lacp</p>
<p># 将成员接口加入聚合组</p>
<p>[S1]interface Eth-Trunk 1</p>
<p>[S1-Eth-Trunk1]trunkport GigabitEthernet 0&#x2F;0&#x2F;10 to 0&#x2F;0&#x2F;12</p>
<p>[S2]interface Eth-Trunk 1</p>
<p>[S2-Eth-Trunk1]trunkport GigabitEthernet 0&#x2F;0&#x2F;10 to 0&#x2F;0&#x2F;12</p>
<p>查看</p>
<p><img src="/2023/12/07/%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88/1chakan1207160903.png" alt="1chakan1207160903"></p>
<p>注意此时三个接口都是Select的状态</p>
<h2 id="选择接口"><a href="#选择接口" class="headerlink" title="选择接口"></a>选择接口</h2><p>​	考虑到网络流量情况，当网络正常时，只需要GigabitEthernet0&#x2F;0&#x2F;11和GigabitEthernet0&#x2F;0&#x2F;12接口处于转发状态，GigabitEthernet0&#x2F;0&#x2F;10接口作为备份。但当活动接口数量少于2时，直接关闭整个Eth-Trunk接口。</p>
<p>全局配置优先级选举主动方，主动方设备的端口上配置接口优先级选举活动端口</p>
<p># 配置设备S1的LACP优先级，使其成为主动端设备</p>
<p>[S1]lacp priority 100 </p>
<p># 配置接口优先级，优选GigabitEthernet0&#x2F;0&#x2F;11和GigabitEthernet0&#x2F;0&#x2F;12接口</p>
<p>[S1]interface GigabitEthernet 0&#x2F;0&#x2F;10 </p>
<p>[S1-GigabitEthernet0&#x2F;0&#x2F;10]lacp priority 40000</p>
<p># 配置接口优先级，优选GigabitEthernet0&#x2F;0&#x2F;11和GigabitEthernet0&#x2F;0&#x2F;12接口</p>
<p>[S1]interface GigabitEthernet 0&#x2F;0&#x2F;10 </p>
<p>[S1-GigabitEthernet0&#x2F;0&#x2F;10]lacp priority 40000</p>
<p>g0&#x2F;0&#x2F;10配置了大于32768的优先级4000，所以变为备份端口</p>
<p>之后，g0&#x2F;0&#x2F;11和g0&#x2F;0&#x2F;12为活动端口</p>
<p>使能了LACP模式链路聚合的两端设备均会收发的LACPDU报文。</p>
<p>首先选举主动端设备：</p>
<ol>
<li>比较系统优先级字段，如果对端的系统优先级高于本端的系统优先级（默认为32768，越小越优），则确定对端为LACP主动端。</li>
<li>如果系统优先级相同，比较两端设备的MAC地址，MAC地址小的一端为LACP主动端。</li>
</ol>
<p>选出主动端后，两端都会以主动端的接口优先级来选择活动接口，接口优先级越小越优，默认为32768。</p>
<p># 配置Eth-trunk活动接口数上限阈值和下限阈值</p>
<p>[S1]interface Eth-Trunk 1</p>
<p>[S1-Eth-Trunk1]max active-linknumber 2</p>
<p>[S1-Eth-Trunk1]least active-linknumber 2</p>
<p>在一个Eth-Trunk接口内，活动接口数可以影响到Eth-Trunk接口的状态和带宽。Eth-Trunk接口的带宽是所有处于Up状态的成员口带宽之和。为保证Eth-Trunk接口的状态和带宽，可以设置以下两个阈值，以减小成员链路状态的变化带来的影响。</p>
<p>• 活动接口数下限阈值：当活动接口数小于配置的下限阈值时，Eth-Trunk接口的状态转为Down。设置活动接口数下限阈值的目的是为了保证最小带宽。<strong>least active-linknumber</strong>命令用来配置链路聚合组活动接口数目的下限阈值。</p>
<p>• 活动接口数上限阈值：当活动接口数达到上限阈值后，之后再发生成员链路状态变为Up都不会使Eth-Trunk接口的带宽增加。设置活动接口数上限阈值的目的是在保证了带宽的情况下提高网络的可靠性。<strong>max active-linknumber</strong>命令用来配置链路聚合组活动接口数目的上限阈值。</p>
<p># 开启抢占功能</p>
<p>[S1]interface Eth-Trunk 1</p>
<p>[S1-Eth-Trunk1]lacp preempt enable</p>
<p>在LACP模式下，当活动链路中出现故障链路时，系统会从备用链路中选择优先级最高的链路替代故障链路；如果被替代的故障链路恢复了正常，而且该链路的优先级又高于替代自己的链路。这种情况下，如果使能了LACP优先级抢占功能，高优先级链路会抢占低优先级链路，<strong>回切</strong>到活动状态。<strong>lacp preempt enable</strong>命令用来使能LACP模式下LACP优先级抢占的功能，缺省情况下，优先级抢占处于禁止状态。</p>
<p># 查看当前 Eth-Trunk接口状态</p>
<p><img src="/2023/12/07/%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88/2chakan2207161758.png" alt="2chakan2207161758"></p>
<p>shutdown接口g0&#x2F;0&#x2F;11和g0&#x2F;0&#x2F;12</p>
<p>查看状态，发现都变为unselect状态</p>
<p>由于设置了Eth-Trunk的活动链路下限阈值为2，所以聚合组中可用活动接口数量少于2时，整个聚合组对应的接口将会被关闭。尽管此时GigabitEthernet0&#x2F;0&#x2F;10处于UP状态，但是仍处于Unselect状态。</p>
<h2 id="修改负载分担模式"><a href="#修改负载分担模式" class="headerlink" title="修改负载分担模式"></a>修改负载分担模式</h2><p># 开启上一步中关闭的接口 </p>
<p>[S1]inter GigabitEthernet 0&#x2F;0&#x2F;11</p>
<p>[S1-GigabitEthernet0&#x2F;0&#x2F;11]undo shutdown </p>
<p>[S1-GigabitEthernet0&#x2F;0&#x2F;11]quit</p>
<p>[S1]inter GigabitEthernet 0&#x2F;0&#x2F;12</p>
<p>[S1-GigabitEthernet0&#x2F;0&#x2F;12]undo shutdown</p>
<p># 大约30秒后，查看当前Eth-Trunk1的接口状态</p>
<p>由于使能了Eth-Trunk接口的抢占功能，所以当GigabitEthernet0&#x2F;0&#x2F;11和GigabitEthernet0&#x2F;0&#x2F;12接口进入UP状态之后，这两个接口的接口的优先级高于GigabitEthernet0&#x2F;0&#x2F;10，所以GigabitEthernet0&#x2F;0&#x2F;10会进入unselect状态。同时因为系统为了保证链路的稳定性，默认的抢占延时为30秒，所以要在30秒后才会发生抢占。</p>
<p># 修改Eth-Trunk接口的负载分担模式为基于目的IP地址</p>
<p>[S1]interface Eth-Trunk 1</p>
<p>[S1-Eth-Trunk1]load-balance dst-ip</p>
<p>当需要将Eth-Trunk接口的流量分散到不同的链路上，最后能到达统一目的地时，使用load-balance命令配置Eth-Trunk接口负载分担模式，以确保出方向的流量在各物理链路间进行合理的负载分担，避免链路阻塞。由于负载分担只对出方向的流量有效，因此链路两端接口的负载分担模式可以不一致，两端互不影响</p>
]]></content>
      <categories>
        <category>ip实验</category>
      </categories>
      <tags>
        <tag>链路聚合</tag>
        <tag>lacp</tag>
        <tag>eth-trunk</tag>
      </tags>
  </entry>
</search>
